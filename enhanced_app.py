import streamlit as st
import pandas as pd
import sqlite3
import hashlib
import smtplib
import ssl
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import json
import os
import io
import base64
import time
from typing import Optional, List, Dict, Tuple, Any
import random
import string
import secrets
import uuid
from threading import Thread
import schedule
import openai

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º AI —Å–µ—Ä–≤–∏—Å—ã
from ai_services import ai_analytics, ai_assistant, automation_service
from chat_notification_service import chat_service, notification_service, customer_communication
from integration_service import integration_service, export_service
from ui_components import *
from mobile_pwa import initialize_mobile_pwa

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ë–∏–∑–Ω–µ—Å –ú–µ–Ω–µ–¥–∂–µ—Ä –ü—Ä–µ–º–∏—É–º+",
    page_icon="üöÄ",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# –£–ª—É—á—à–µ–Ω–Ω—ã–π CSS –¥–∏–∑–∞–π–Ω
st.markdown("""
<style>
    /* –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∏–ª–∏ */
    .main {
        padding: 1rem;
    }
    
    /* –ì–∞–º–±—É—Ä–≥–µ—Ä –º–µ–Ω—é —Å—Ç–∏–ª–∏ */
    .hamburger-menu {
        position: fixed;
        top: 10px;
        left: 10px;
        z-index: 1000;
        background: #1f77b4;
        color: white;
        border: none;
        border-radius: 5px;
        padding: 10px;
        cursor: pointer;
        font-size: 18px;
    }
    
    .sidebar-menu {
        position: fixed;
        top: 0;
        left: -300px;
        width: 300px;
        height: 100vh;
        background: #f8f9fa;
        transition: left 0.3s ease;
        z-index: 999;
        padding: 20px;
        box-shadow: 2px 0 5px rgba(0,0,0,0.1);
        overflow-y: auto;
    }
    
    .sidebar-menu.open {
        left: 0;
    }
    
    .menu-item {
        display: block;
        padding: 12px 16px;
        margin: 5px 0;
        text-decoration: none;
        color: #333;
        border-radius: 5px;
        transition: background-color 0.3s;
    }
    
    .menu-item:hover {
        background-color: #e9ecef;
    }
    
    .menu-item.active {
        background-color: #1f77b4;
        color: white;
    }
    
    /* –ö–∞—Ä—Ç–æ—á–∫–∏ */
    .metric-card {
        background: white;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        margin: 10px 0;
    }
    
    /* –ü—Ä–µ–º–∏—É–º –±–µ–π–¥–∂ */
    .premium-badge {
        background: linear-gradient(45deg, #FFD700, #FFA500);
        color: #333;
        padding: 5px 10px;
        border-radius: 15px;
        font-size: 12px;
        font-weight: bold;
        display: inline-block;
        margin-left: 10px;
    }
    
    /* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */
    .notification-badge {
        background: #dc3545;
        color: white;
        border-radius: 50%;
        padding: 2px 6px;
        font-size: 10px;
        position: absolute;
        top: -5px;
        right: -5px;
    }
    
    /* –ß–∞—Ç —Å—Ç–∏–ª–∏ */
    .chat-message {
        padding: 10px;
        margin: 5px 0;
        border-radius: 10px;
        max-width: 70%;
    }
    
    .chat-message.own {
        background: #1f77b4;
        color: white;
        margin-left: auto;
    }
    
    .chat-message.other {
        background: #f1f3f4;
        color: #333;
    }
    
    /* –°–∫—Ä—ã—Ç–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ Streamlit */
    #MainMenu {visibility: hidden;}
    footer {visibility: hidden;}
    .stDeployButton {display: none;}
    
    /* –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å */
    @media (max-width: 768px) {
        .main {
            padding: 0.5rem;
        }
        
        .sidebar-menu {
            width: 250px;
        }
    }
</style>
""", unsafe_allow_html=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω API –∫–ª—é—á)
try:
    openai.api_key = os.getenv("OPENAI_API_KEY")
except:
    pass

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_enhanced_db():
    conn = sqlite3.connect('business_manager.db')
    cursor = conn.cursor()
    
    # –ë–∞–∑–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã (–∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞)
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            email TEXT UNIQUE NOT NULL,
            password_hash TEXT NOT NULL,
            phone TEXT,
            full_name TEXT,
            business_name TEXT,
            is_admin BOOLEAN DEFAULT FALSE,
            premium_status BOOLEAN DEFAULT FALSE,
            premium_start_date TIMESTAMP,
            premium_end_date TIMESTAMP,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            last_login TIMESTAMP,
            avatar_url TEXT,
            timezone TEXT DEFAULT 'UTC'
        )
    ''')
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Ç–∞–±–ª–∏—Ü–∞–º
    try:
        cursor.execute("ALTER TABLE users ADD COLUMN avatar_url TEXT")
    except sqlite3.OperationalError:
        pass
    
    try:
        cursor.execute("ALTER TABLE users ADD COLUMN timezone TEXT DEFAULT 'UTC'")
    except sqlite3.OperationalError:
        pass
    
    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS user_permissions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            company_id INTEGER NOT NULL,
            permission_type TEXT NOT NULL,
            resource_type TEXT NOT NULL,
            granted_by INTEGER,
            granted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users (id),
            FOREIGN KEY (company_id) REFERENCES companies (id),
            FOREIGN KEY (granted_by) REFERENCES users (id)
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –≤ –∫–æ–º–∞–Ω–¥—É
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS team_invitations (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            company_id INTEGER NOT NULL,
            email TEXT NOT NULL,
            role TEXT NOT NULL,
            invited_by INTEGER NOT NULL,
            invitation_token TEXT UNIQUE NOT NULL,
            expires_at TIMESTAMP NOT NULL,
            accepted_at TIMESTAMP,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (company_id) REFERENCES companies (id),
            FOREIGN KEY (invited_by) REFERENCES users (id)
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –∫–æ–º–ø–∞–Ω–∏–π (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS companies (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            owner_id INTEGER NOT NULL,
            name TEXT NOT NULL,
            description TEXT,
            logo_url TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (owner_id) REFERENCES users (id)
        )
    ''')
    
    # –°–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∫–æ–º–ø–∞–Ω–∏—è–º–∏
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS user_companies (
            user_id INTEGER NOT NULL,
            company_id INTEGER NOT NULL,
            role TEXT NOT NULL,
            joined_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            PRIMARY KEY (user_id, company_id),
            FOREIGN KEY (user_id) REFERENCES users (id),
            FOREIGN KEY (company_id) REFERENCES companies (id)
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –ò–ò –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS ai_predictions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            company_id INTEGER,
            prediction_type TEXT NOT NULL,
            prediction_data TEXT NOT NULL,
            confidence_score REAL,
            period_start DATE,
            period_end DATE,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users (id),
            FOREIGN KEY (company_id) REFERENCES companies (id)
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS automation_tasks (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            company_id INTEGER,
            task_type TEXT NOT NULL,
            task_config TEXT NOT NULL,
            schedule_pattern TEXT,
            last_run TIMESTAMP,
            next_run TIMESTAMP,
            is_active BOOLEAN DEFAULT TRUE,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users (id),
            FOREIGN KEY (company_id) REFERENCES companies (id)
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –ò–ò —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS ai_recommendations (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            company_id INTEGER,
            recommendation_type TEXT NOT NULL,
            title TEXT NOT NULL,
            description TEXT NOT NULL,
            action_data TEXT,
            priority INTEGER DEFAULT 1,
            is_read BOOLEAN DEFAULT FALSE,
            is_applied BOOLEAN DEFAULT FALSE,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users (id),
            FOREIGN KEY (company_id) REFERENCES companies (id)
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —á–∞—Ç-–∫–∞–Ω–∞–ª–æ–≤
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS chat_channels (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            company_id INTEGER NOT NULL,
            name TEXT NOT NULL,
            description TEXT,
            is_private BOOLEAN DEFAULT FALSE,
            created_by INTEGER NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (company_id) REFERENCES companies (id),
            FOREIGN KEY (created_by) REFERENCES users (id)
        )
    ''')
    
    # –£—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–∞–Ω–∞–ª–æ–≤
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS channel_members (
            channel_id INTEGER NOT NULL,
            user_id INTEGER NOT NULL,
            joined_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            role TEXT DEFAULT 'member',
            PRIMARY KEY (channel_id, user_id),
            FOREIGN KEY (channel_id) REFERENCES chat_channels (id),
            FOREIGN KEY (user_id) REFERENCES users (id)
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS chat_messages (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            sender_id INTEGER NOT NULL,
            channel_id INTEGER,
            receiver_id INTEGER,
            company_id INTEGER,
            message TEXT NOT NULL,
            message_type TEXT DEFAULT 'text',
            file_url TEXT,
            is_edited BOOLEAN DEFAULT FALSE,
            edited_at TIMESTAMP,
            timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (sender_id) REFERENCES users (id),
            FOREIGN KEY (channel_id) REFERENCES chat_channels (id),
            FOREIGN KEY (receiver_id) REFERENCES users (id),
            FOREIGN KEY (company_id) REFERENCES companies (id)
        )
    ''')
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS notification_settings (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            notification_type TEXT NOT NULL,
            delivery_method TEXT NOT NULL,
            is_enabled BOOLEAN DEFAULT TRUE,
            FOREIGN KEY (user_id) REFERENCES users (id)
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS integrations (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            company_id INTEGER,
            integration_type TEXT NOT NULL,
            config_data TEXT NOT NULL,
            is_active BOOLEAN DEFAULT TRUE,
            last_sync TIMESTAMP,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users (id),
            FOREIGN KEY (company_id) REFERENCES companies (id)
        )
    ''')
    
    # –î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS user_2fa (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL UNIQUE,
            secret_key TEXT NOT NULL,
            backup_codes TEXT,
            is_enabled BOOLEAN DEFAULT FALSE,
            enabled_at TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users (id)
        )
    ''')
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute('SELECT * FROM users WHERE email = ?', ('alexkurumbayev@gmail.com',))
    if cursor.fetchone() is None:
        admin_password_hash = hashlib.sha256('qwerty123G'.encode()).hexdigest()
        cursor.execute(
            "INSERT INTO users (email, password_hash, full_name, is_admin, premium_status) VALUES (?, ?, ?, ?, ?)",
            ('alexkurumbayev@gmail.com', admin_password_hash, 'Alex Kurumbayev', True, True)
        )
        conn.commit()
    
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def get_db_connection():
    conn = sqlite3.connect('business_manager.db')
    conn.row_factory = sqlite3.Row
    return conn

def authenticate_user(email, password):
    """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = get_db_connection()
    cursor = conn.cursor()
    password_hash = hashlib.sha256(password.encode()).hexdigest()
    cursor.execute("SELECT * FROM users WHERE email = ? AND password_hash = ?", (email, password_hash))
    user = cursor.fetchone()
    conn.close()
    return user

def create_user(email, password, full_name=None, phone=None):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = get_db_connection()
    cursor = conn.cursor()
    password_hash = hashlib.sha256(password.encode()).hexdigest()
    try:
        cursor.execute(
            "INSERT INTO users (email, password_hash, full_name, phone) VALUES (?, ?, ?, ?)",
            (email, password_hash, full_name, phone)
        )
        conn.commit()
        user_id = cursor.lastrowid
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–∞–Ω–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        company_name = f"–ö–æ–º–ø–∞–Ω–∏—è {full_name or email.split('@')[0]}"
        cursor.execute("INSERT INTO companies (owner_id, name) VALUES (?, ?)", (user_id, company_name))
        conn.commit()
        company_id = cursor.lastrowid
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–º–ø–∞–Ω–∏—é –∫–∞–∫ –≤–ª–∞–¥–µ–ª—å—Ü–∞
        cursor.execute("INSERT INTO user_companies (user_id, company_id, role) VALUES (?, ?, ?)", 
                      (user_id, company_id, 'owner'))
        conn.commit()
        
        return True
    except sqlite3.IntegrityError:
        return False
    finally:
        conn.close()

def get_user_companies(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("""
        SELECT c.id, c.name, c.description, uc.role, c.logo_url
        FROM companies c 
        JOIN user_companies uc ON c.id = uc.company_id 
        WHERE uc.user_id = ?
        ORDER BY uc.joined_at DESC
    """, (user_id,))
    companies = cursor.fetchall()
    conn.close()
    return companies

def create_company(owner_id, name, description=None):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–∏"""
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("INSERT INTO companies (owner_id, name, description) VALUES (?, ?, ?)", 
                  (owner_id, name, description))
    conn.commit()
    company_id = cursor.lastrowid
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –≤ user_companies
    cursor.execute("INSERT INTO user_companies (user_id, company_id, role) VALUES (?, ?, ?)", 
                  (owner_id, company_id, 'owner'))
    conn.commit()
    conn.close()
    return company_id

def invite_user_to_company(company_id, email, role, invited_by):
    """–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–º–∞–Ω–¥—É"""
    conn = get_db_connection()
    cursor = conn.cursor()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    invitation_token = str(uuid.uuid4())
    expires_at = datetime.now() + timedelta(days=7)  # –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç 7 –¥–Ω–µ–π
    
    cursor.execute("""
        INSERT INTO team_invitations (company_id, email, role, invited_by, invitation_token, expires_at)
        VALUES (?, ?, ?, ?, ?, ?)
    """, (company_id, email, role, invited_by, invitation_token, expires_at))
    conn.commit()
    conn.close()
    
    return invitation_token

def accept_invitation(invitation_token, user_id):
    """–ü—Ä–∏–Ω—è—Ç–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –∫–æ–º–∞–Ω–¥—É"""
    conn = get_db_connection()
    cursor = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
    cursor.execute("""
        SELECT * FROM team_invitations 
        WHERE invitation_token = ? AND expires_at > CURRENT_TIMESTAMP AND accepted_at IS NULL
    """, (invitation_token,))
    invitation = cursor.fetchone()
    
    if not invitation:
        conn.close()
        return False
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–º–ø–∞–Ω–∏—é
    try:
        cursor.execute("INSERT INTO user_companies (user_id, company_id, role) VALUES (?, ?, ?)",
                      (user_id, invitation['company_id'], invitation['role']))
        
        # –û—Ç–º–µ—á–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–∏–Ω—è—Ç–æ–µ
        cursor.execute("UPDATE team_invitations SET accepted_at = CURRENT_TIMESTAMP WHERE id = ?",
                      (invitation['id'],))
        conn.commit()
        conn.close()
        return True
    except sqlite3.IntegrityError:
        conn.close()
        return False

def get_company_team_members(company_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã –∫–æ–º–ø–∞–Ω–∏–∏"""
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("""
        SELECT u.id, u.email, u.full_name, u.avatar_url, uc.role, uc.joined_at
        FROM users u 
        JOIN user_companies uc ON u.id = uc.user_id 
        WHERE uc.company_id = ?
        ORDER BY uc.joined_at DESC
    """, (company_id,))
    members = cursor.fetchall()
    conn.close()
    return members

def update_user_role_in_company(user_id, company_id, new_role):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–º–ø–∞–Ω–∏–∏"""
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("UPDATE user_companies SET role = ? WHERE user_id = ? AND company_id = ?",
                  (new_role, user_id, company_id))
    conn.commit()
    conn.close()

def remove_user_from_company(user_id, company_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–º–ø–∞–Ω–∏–∏"""
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("DELETE FROM user_companies WHERE user_id = ? AND company_id = ?",
                  (user_id, company_id))
    conn.commit()
    conn.close()

def switch_user_context(user_id, target_user_id, company_id):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–º–ø–µ—Ä—Å–æ–Ω–∞—Ü–∏—è)"""
    conn = get_db_connection()
    cursor = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ
    cursor.execute("""
        SELECT uc.role FROM user_companies uc 
        WHERE uc.user_id = ? AND uc.company_id = ? AND uc.role IN ('owner', 'admin')
    """, (user_id, company_id))
    
    if cursor.fetchone():
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ü–µ–ª–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ –∫–æ–º–ø–∞–Ω–∏–∏
        cursor.execute("SELECT * FROM user_companies WHERE user_id = ? AND company_id = ?",
                      (target_user_id, company_id))
        if cursor.fetchone():
            conn.close()
            return True
    
    conn.close()
    return False

def generate_ai_business_idea(prompt, user_id):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å-–∏–¥–µ–∏ —Å –ø–æ–º–æ—â—å—é –ò–ò"""
    try:
        if not openai.api_key:
            # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            ideas = [
                f"üí° **–ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è '{prompt}':**\n\n1. –°–æ–∑–¥–∞–π—Ç–µ SaaS-–ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –≤ –≤–∞—à–µ–π —Å—Ñ–µ—Ä–µ\n2. –†–∞–∑—Ä–∞–±–æ—Ç–∞–π—Ç–µ –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫–æ–º\n3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –æ–Ω–ª–∞–π–Ω-–∫—É—Ä—Å—ã –ø–æ –≤–∞—à–µ–π —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–µ\n4. –°–æ–∑–¥–∞–π—Ç–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –æ—Ç—Ä–∞—Å–ª–∏",
                f"üöÄ **–°—Ç—Ä–∞—Ç–µ–≥–∏—è —Ä–æ—Å—Ç–∞ –¥–ª—è '{prompt}':**\n\n1. –í–Ω–µ–¥—Ä–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤\n2. –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–π—Ç–µ email-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥\n3. –°–æ–∑–¥–∞–π—Ç–µ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É\n4. –†–∞–∑—Ä–∞–±–æ—Ç–∞–π—Ç–µ API –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π",
                f"üìà **–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å–∞ '{prompt}':**\n\n1. –í–Ω–µ–¥—Ä–∏—Ç–µ CRM-—Å–∏—Å—Ç–µ–º—É\n2. –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–π—Ç–µ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å\n3. –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ —Å–∫–ª–∞–¥—Å–∫–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã\n4. –°–æ–∑–¥–∞–π—Ç–µ —Å–∏—Å—Ç–µ–º—É –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"
            ]
            generated_idea = random.choice(ideas)
        else:
            # –†–µ–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ OpenAI API
            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –±–∏–∑–Ω–µ—Å—É. –ì–µ–Ω–µ—Ä–∏—Ä—É–π –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–µ –∏ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ –±–∏–∑–Ω–µ—Å-–∏–¥–µ–∏."},
                    {"role": "user", "content": f"–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –±–∏–∑–Ω–µ—Å-–∏–¥–µ—é –¥–ª—è: {prompt}"}
                ],
                max_tokens=500,
                temperature=0.7
            )
            generated_idea = response.choices[0].message.content
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–¥–µ—é –≤ –±–∞–∑—É
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("INSERT INTO ai_ideas (user_id, idea_text) VALUES (?, ?)",
                      (user_id, generated_idea))
        conn.commit()
        conn.close()
        
        return generated_idea
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–∏: {str(e)}"

def get_user_ai_ideas(user_id, limit=10):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ò–ò –∏–¥–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM ai_ideas WHERE user_id = ? ORDER BY generated_at DESC LIMIT ?",
                  (user_id, limit))
    ideas = cursor.fetchall()
    conn.close()
    return ideas

# –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
def show_hamburger_menu():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–∞–º–±—É—Ä–≥–µ—Ä –º–µ–Ω—é"""
    if 'menu_open' not in st.session_state:
        st.session_state.menu_open = False
    
    # JavaScript –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ–Ω—é
    menu_js = """
    <script>
    function toggleMenu() {
        const menu = document.querySelector('.sidebar-menu');
        const isOpen = menu.classList.contains('open');
        if (isOpen) {
            menu.classList.remove('open');
        } else {
            menu.classList.add('open');
        }
    }
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
    document.addEventListener('click', function(event) {
        const menu = document.querySelector('.sidebar-menu');
        const hamburger = document.querySelector('.hamburger-menu');
        if (!menu.contains(event.target) && !hamburger.contains(event.target)) {
            menu.classList.remove('open');
        }
    });
    </script>
    """
    
    # HTML –¥–ª—è –º–µ–Ω—é
    menu_html = f"""
    <button class="hamburger-menu" onclick="toggleMenu()">‚ò∞</button>
    <div class="sidebar-menu">
        <h3>–ë–∏–∑–Ω–µ—Å –ú–µ–Ω–µ–¥–∂–µ—Ä <span class="premium-badge">–ü–†–ï–ú–ò–£–ú+</span></h3>
        <hr>
        <div class="menu-section">
            <h4>–û—Å–Ω–æ–≤–Ω–æ–µ</h4>
            <a href="#" class="menu-item" onclick="setPage('dashboard')">üìä –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</a>
            <a href="#" class="menu-item" onclick="setPage('orders')">üì¶ –ó–∞–∫–∞–∑—ã</a>
            <a href="#" class="menu-item" onclick="setPage('inventory')">üè™ –°–∫–ª–∞–¥</a>
            <a href="#" class="menu-item" onclick="setPage('analytics')">üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞</a>
        </div>
        <hr>
        <div class="menu-section">
            <h4>–ü—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–∏</h4>
            <a href="#" class="menu-item" onclick="setPage('ai_features')">üß† –ò–ò-—Ñ—É–Ω–∫—Ü–∏–∏</a>
            <a href="#" class="menu-item" onclick="setPage('chat')">üí¨ –ö–æ—Ä–ø. —á–∞—Ç</a>
            <a href="#" class="menu-item" onclick="setPage('automation')">üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è</a>
            <a href="#" class="menu-item" onclick="setPage('integrations')">üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏</a>
        </div>
        <hr>
        <div class="menu-section">
            <h4>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</h4>
            <a href="#" class="menu-item" onclick="setPage('companies')">üè¢ –ö–æ–º–ø–∞–Ω–∏–∏</a>
            <a href="#" class="menu-item" onclick="setPage('team')">üë• –ö–æ–º–∞–Ω–¥–∞</a>
            <a href="#" class="menu-item" onclick="setPage('settings')">‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏</a>
        </div>
        """ + ("<hr><div class='menu-section'><h4>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ</h4><a href='#' class='menu-item' onclick='setPage(\"admin\")'>üë®‚Äçüíº –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</a></div>" if st.session_state.get('is_admin') else "") + """
    </div>
    """ + menu_js + """
    """
    
    st.markdown(menu_html, unsafe_allow_html=True)

def show_login_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞"""
    st.title("üöÄ –ë–∏–∑–Ω–µ—Å –ú–µ–Ω–µ–¥–∂–µ—Ä –ü—Ä–µ–º–∏—É–º+")
    st.markdown("### –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É")
    
    tab1, tab2 = st.tabs(["–í—Ö–æ–¥", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"])
    
    with tab1:
        with st.form("login_form"):
            email = st.text_input("Email")
            password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")
            submitted = st.form_submit_button("–í–æ–π—Ç–∏")
            
            if submitted:
                user = authenticate_user(email, password)
                if user:
                    st.session_state.user_id = user['id']
                    st.session_state.user_email = user['email']
                    st.session_state.user_name = user['full_name']
                    st.session_state.is_admin = user['is_admin']
                    st.session_state.premium_status = user['premium_status']
                    st.session_state.logged_in = True
                    
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–æ–º–ø–∞–Ω–∏—é
                    companies = get_user_companies(user['id'])
                    if companies:
                        st.session_state.active_company_id = companies[0]['id']
                    
                    st.success("–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!")
                    st.rerun()
                else:
                    st.error("–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
    
    with tab2:
        with st.form("register_form"):
            reg_email = st.text_input("Email", key="reg_email")
            reg_password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password", key="reg_password")
            reg_full_name = st.text_input("–ü–æ–ª–Ω–æ–µ –∏–º—è", key="reg_full_name")
            reg_phone = st.text_input("–¢–µ–ª–µ—Ñ–æ–Ω (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)", key="reg_phone")
            reg_submitted = st.form_submit_button("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
            
            if reg_submitted:
                if create_user(reg_email, reg_password, reg_full_name, reg_phone):
                    st.success("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏.")
                else:
                    st.error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

def show_dashboard():
    """–ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º"""
    create_custom_header("üìä –î–∞—à–±–æ—Ä–¥", "–û–±–∑–æ—Ä –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞")
    
    user_id = st.session_state.user_id
    company_id = st.session_state.get('active_company_id')
    
    if not company_id:
        create_notification("–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω—É—é –∫–æ–º–ø–∞–Ω–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞—à–±–æ—Ä–¥–∞", "warning")
        return
    
    # –°–µ–ª–µ–∫—Ç–æ—Ä –∫–æ–º–ø–∞–Ω–∏–π
    create_company_selector()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    conn = get_db_connection()
    cursor = conn.cursor()
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    cursor.execute("SELECT COUNT(*) FROM orders WHERE user_id = ? AND company_id = ?", (user_id, company_id))
    total_orders = cursor.fetchone()[0]
    
    cursor.execute("SELECT SUM(total_amount) FROM orders WHERE user_id = ? AND company_id = ?", (user_id, company_id))
    total_revenue = cursor.fetchone()[0] or 0
    
    cursor.execute("SELECT COUNT(*) FROM customers WHERE company_id = ?", (company_id,))
    total_customers = cursor.fetchone()[0]
    
    cursor.execute("SELECT COUNT(*) FROM inventory WHERE user_id = ? AND company_id = ? AND quantity <= min_stock", (user_id, company_id))
    low_stock_items = cursor.fetchone()[0]
    
    conn.close()
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É –º–µ—Ç—Ä–∏–∫
    stats_data = [
        ("–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤", str(total_orders), "+12%", "positive"),
        ("–í—ã—Ä—É—á–∫–∞", f"‚ÇΩ{total_revenue:,.0f}", "+8%", "positive"),
        ("–ö–ª–∏–µ–Ω—Ç—ã", str(total_customers), "+5%", "positive"),
        ("–ù–∏–∑–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏", str(low_stock_items), "-2", "negative" if low_stock_items > 0 else "positive")
    ]
    
    create_stats_grid(stats_data)
    
    # –ì—Ä–∞—Ñ–∏–∫–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
    col1, col2 = st.columns(2)
    
    with col1:
        # –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–¥–∞–∂
        sales_data = ai_analytics.generate_sales_forecast(user_id, company_id, 30)
        if sales_data:
            fig = px.line(
                x=list(range(len(sales_data))), 
                y=sales_data,
                title="–ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–¥–∞–∂ –Ω–∞ 30 –¥–Ω–µ–π",
                labels={'x': '–î–Ω–∏', 'y': '–ü—Ä–æ–¥–∞–∂–∏'}
            )
            fig.update_layout(
                plot_bgcolor='rgba(0,0,0,0)',
                paper_bgcolor='rgba(0,0,0,0)',
                font_color='#333'
            )
            create_chart_container(fig, "üìà –ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–¥–∞–∂")
    
    with col2:
        # –¢–æ–ø —Ç–æ–≤–∞—Ä—ã
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("""
            SELECT i.name, SUM(oi.quantity) as sold
            FROM order_items oi
            JOIN inventory i ON oi.inventory_id = i.id
            JOIN orders o ON oi.order_id = o.id
            WHERE o.user_id = ? AND o.company_id = ?
            GROUP BY i.name
            ORDER BY sold DESC
            LIMIT 5
        """, (user_id, company_id))
        
        top_products = cursor.fetchall()
        conn.close()
        
        if top_products:
            products = [p[0] for p in top_products]
            quantities = [p[1] for p in top_products]
            
            fig = px.bar(
                x=quantities,
                y=products,
                orientation='h',
                title="–¢–æ–ø-5 —Ç–æ–≤–∞—Ä–æ–≤",
                labels={'x': '–ü—Ä–æ–¥–∞–Ω–æ', 'y': '–¢–æ–≤–∞—Ä—ã'}
            )
            fig.update_layout(
                plot_bgcolor='rgba(0,0,0,0)',
                paper_bgcolor='rgba(0,0,0,0)',
                font_color='#333'
            )
            create_chart_container(fig, "üèÜ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã")
    
    # –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    st.markdown("### üöÄ –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è")
    
    action_buttons = [
        ("üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑", "new_order"),
        ("üë• –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞", "new_customer"),
        ("üìã –ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å–∫–ª–∞–¥", "add_inventory"),
        ("üìä –û—Ç—á–µ—Ç", "generate_report")
    ]
    
    selected_action = create_action_buttons(action_buttons)
    
    if selected_action:
        if selected_action == "new_order":
            st.session_state.page = 'orders'
            st.rerun()
        elif selected_action == "new_customer":
            st.session_state.page = 'customers'
            st.rerun()
        elif selected_action == "add_inventory":
            st.session_state.page = 'inventory'
            st.rerun()
        elif selected_action == "generate_report":
            create_notification("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...", "info")
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã
    st.markdown("### üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã")
    
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("""
        SELECT id, created_at, customer_name, total_amount, status
        FROM orders 
        WHERE user_id = ? AND company_id = ?
        ORDER BY created_at DESC 
        LIMIT 5
    """, (user_id, company_id))
    
    recent_orders = cursor.fetchall()
    conn.close()
    
    if recent_orders:
        df = pd.DataFrame(recent_orders, columns=['ID', '–î–∞—Ç–∞', '–ö–ª–∏–µ–Ω—Ç', '–°—É–º–º–∞', '–°—Ç–∞—Ç—É—Å'])
        df['–î–∞—Ç–∞'] = pd.to_datetime(df['–î–∞—Ç–∞']).dt.strftime('%d.%m.%Y %H:%M')
        df['–°—É–º–º–∞'] = df['–°—É–º–º–∞'].apply(lambda x: f"‚ÇΩ{x:,.0f}")
        
        create_data_table(df, "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã")
    else:
        create_notification("–ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç", "info")
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –∑–∞–¥–∞—á–∏
    if st.session_state.get('premium_status'):
        st.markdown("### üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∏–∑–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏
        if low_stock_items > 0:
            create_notification(f"‚ö†Ô∏è {low_stock_items} —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º –Ω–∞ —Å–∫–ª–∞–¥–µ", "warning")
        
        # AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = ai_assistant.get_business_recommendations(user_id, company_id)
        if recommendations:
            st.markdown("### ü§ñ AI –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
            for rec in recommendations[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
                create_notification(f"üí° {rec}", "info")
    else:
        create_premium_feature_lock("AI –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")

def show_ai_features():
    """–ò–ò —Ñ—É–Ω–∫—Ü–∏–∏"""
    st.title("üß† –ò–ò-—Ñ—É–Ω–∫—Ü–∏–∏ –ü—Ä–µ–º–∏—É–º+")
    
    if not st.session_state.get('premium_status'):
        st.warning("–ò–ò-—Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –ü—Ä–µ–º–∏—É–º+ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        return
    
    user_id = st.session_state.user_id
    company_id = st.session_state.get('active_company_id')
    
    tab1, tab2, tab3, tab4, tab5 = st.tabs(["–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–¥–µ–π", "–ò–ò-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç", "–ü—Ä–æ–≥–Ω–æ–∑—ã", "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è"])
    
    with tab1:
        st.subheader("üöÄ AI-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –±–∏–∑–Ω–µ—Å-–∏–¥–µ–π")
        
        idea_prompt = st.text_area(
            "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∑–∞–¥–∞—á—É –∏–ª–∏ —Å—Ñ–µ—Ä—É –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:",
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: '–Ω—É–∂–Ω–∞ –∏–¥–µ—è –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–µ –æ–¥–µ–∂–¥—ã'"
        )
        
        if st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–¥–µ—é", type="primary"):
            if idea_prompt:
                with st.spinner("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–¥–µ—é..."):
                    idea = generate_ai_business_idea(idea_prompt, user_id)
                    st.markdown(idea)
            else:
                st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∑–∞–¥–∞—á—É")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∏–¥–µ–∏
        st.subheader("üìù –í–∞—à–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–¥–µ–∏")
        ideas = get_user_ai_ideas(user_id)
        
        for idea in ideas:
            with st.expander(f"–ò–¥–µ—è –æ—Ç {idea['generated_at'][:16]}"):
                st.markdown(idea['idea_text'])
    
    with tab2:
        st.subheader("ü§ñ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç 24/7")
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        st.markdown("### –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å-–¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        
        col1, col2 = st.columns(2)
        with col1:
            doc_type = st.selectbox("–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞", [
                "business_plan", "marketing_strategy", "sales_report", 
                "job_description", "contract_template"
            ], format_func=lambda x: {
                "business_plan": "–ë–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω",
                "marketing_strategy": "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è", 
                "sales_report": "–û—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º",
                "job_description": "–û–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏",
                "contract_template": "–®–∞–±–ª–æ–Ω –¥–æ–≥–æ–≤–æ—Ä–∞"
            }[x])
        
        with col2:
            if st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç"):
                context = {
                    'company_name': '–ú–æ—è –∫–æ–º–ø–∞–Ω–∏—è',
                    'industry': '—É—Å–ª—É–≥–∏',
                    'budget': '100000'
                }
                
                with st.spinner("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç..."):
                    document = ai_assistant.generate_business_document(doc_type, context)
                    st.markdown(document)
        
        # –ß–∞—Ç —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º
        st.markdown("### –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É")
        
        if 'chat_messages' not in st.session_state:
            st.session_state.chat_messages = []
        
        user_question = st.text_input("–í–∞—à –≤–æ–ø—Ä–æ—Å:")
        if st.button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å"):
            if user_question:
                st.session_state.chat_messages.append({"role": "user", "content": user_question})
                
                with st.spinner("–ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç..."):
                    answer = ai_assistant.answer_business_question(user_question)
                    st.session_state.chat_messages.append({"role": "assistant", "content": answer})
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–∞—Ç–∞
        for msg in st.session_state.chat_messages[-10:]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
            if msg["role"] == "user":
                st.markdown(f"**–í—ã:** {msg['content']}")
            else:
                st.markdown(f"**–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç:** {msg['content']}")
    
    with tab3:
        st.subheader("üìà –ò–ò-–ø—Ä–æ–≥–Ω–æ–∑—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞")
        
        if company_id:
            col1, col2 = st.columns(2)
            
            with col1:
                if st.button("–ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–¥–∞–∂"):
                    with st.spinner("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑..."):
                        forecast = ai_analytics.generate_sales_forecast(user_id, company_id, 30)
                        
                        st.markdown("### –ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–¥–∞–∂ –Ω–∞ 30 –¥–Ω–µ–π")
                        
                        # –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥–Ω–æ–∑–∞
                        df_forecast = pd.DataFrame({
                            '–î–∞—Ç–∞': forecast['dates'],
                            '–ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–¥–∞–∂': forecast['forecast']
                        })
                        
                        fig = px.line(df_forecast, x='–î–∞—Ç–∞', y='–ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–¥–∞–∂', 
                                     title="–ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–¥–∞–∂")
                        st.plotly_chart(fig, use_container_width=True)
                        
                        # –ú–µ—Ç—Ä–∏–∫–∏
                        col_a, col_b, col_c = st.columns(3)
                        with col_a:
                            st.metric("–û–±—â–∏–π –ø—Ä–æ–≥–Ω–æ–∑", f"‚ÇΩ{forecast['total_predicted']:,.0f}")
                        with col_b:
                            st.metric("–¢—Ä–µ–Ω–¥", forecast['trend'])
                        with col_c:
                            st.metric("–¢–æ—á–Ω–æ—Å—Ç—å", f"{forecast['confidence_score']*100:.0f}%")
            
            with col2:
                if st.button("–ê–Ω–∞–ª–∏–∑ –∫–ª–∏–µ–Ω—Ç–æ–≤"):
                    with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤..."):
                        insights = ai_analytics.generate_customer_insights(user_id, company_id)
                        
                        if 'segments' in insights:
                            st.markdown("### –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤")
                            
                            # –î–∏–∞–≥—Ä–∞–º–º–∞ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
                            segments_df = pd.DataFrame(list(insights['segments'].items()), 
                                                     columns=['–°–µ–≥–º–µ–Ω—Ç', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'])
                            
                            fig = px.pie(segments_df, values='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', names='–°–µ–≥–º–µ–Ω—Ç',
                                       title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º")
                            st.plotly_chart(fig, use_container_width=True)
                            
                            # –ú–µ—Ç—Ä–∏–∫–∏
                            col_a, col_b = st.columns(2)
                            with col_a:
                                st.metric("–í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤", insights['total_customers'])
                            with col_b:
                                st.metric("–°—Ä–µ–¥–Ω–∏–π LTV", f"‚ÇΩ{insights['average_ltv']:,.0f}")
                            
                            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                            if insights.get('recommendations'):
                                st.markdown("### –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
                                for rec in insights['recommendations']:
                                    st.info(f"**{rec['title']}**: {rec['description']}")
                        else:
                            st.info(insights.get('message', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞'))
        else:
            st.warning("–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω—É—é –∫–æ–º–ø–∞–Ω–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤")
    
    with tab4:
        st.subheader("üí° –ò–ò-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
        
        if company_id:
            if st.button("–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–∫–ª–∞–¥—É"):
                with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∫–ª–∞–¥..."):
                    recommendations = ai_analytics.generate_inventory_recommendations(user_id, company_id)
                    
                    if recommendations:
                        for rec in recommendations:
                            priority_colors = {
                                'high': 'üî¥',
                                'medium': 'üü°', 
                                'low': 'üü¢'
                            }
                            
                            priority_icon = priority_colors.get(rec['priority'], '‚ö™')
                            
                            with st.expander(f"{priority_icon} {rec['title']}"):
                                st.write(rec['description'])
                                
                                if rec.get('suggested_quantity'):
                                    st.info(f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {rec['suggested_quantity']} –µ–¥–∏–Ω–∏—Ü")
                                
                                if st.button(f"–ü—Ä–∏–º–µ–Ω–∏—Ç—å", key=f"apply_{rec.get('product_id', random.randint(1000, 9999))}"):
                                    st.success("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∞!")
                    else:
                        st.info("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–∞—Ö.")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            st.markdown("### –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
            conn = get_db_connection()
            cursor = conn.cursor()
            cursor.execute("""
                SELECT * FROM ai_recommendations 
                WHERE user_id = ? AND company_id = ?
                ORDER BY created_at DESC LIMIT 5
            """, (user_id, company_id))
            saved_recs = cursor.fetchall()
            conn.close()
            
            for rec in saved_recs:
                with st.expander(f"{rec['title']} - {rec['created_at'][:16]}"):
                    st.write(rec['description'])
                    if not rec['is_read']:
                        if st.button("–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ", key=f"read_{rec['id']}"):
                            conn = get_db_connection()
                            cursor = conn.cursor()
                            cursor.execute("UPDATE ai_recommendations SET is_read = 1 WHERE id = ?", (rec['id'],))
                            conn.commit()
                            conn.close()
                            st.rerun()
        else:
            st.warning("–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω—É—é –∫–æ–º–ø–∞–Ω–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
    
    with tab5:
        st.subheader("üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
        
        if company_id:
            # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
            st.markdown("### –°–æ–∑–¥–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É")
            
            with st.form("automation_form"):
                task_type = st.selectbox("–¢–∏–ø –∑–∞–¥–∞—á–∏", [
                    "auto_report", "stock_reminder", "customer_followup", "backup"
                ], format_func=lambda x: {
                    "auto_report": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç",
                    "stock_reminder": "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å–∫–ª–∞–¥—Å–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–∞—Ö",
                    "customer_followup": "Follow-up —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏",
                    "backup": "–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ"
                }[x])
                
                schedule_pattern = st.selectbox("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", [
                    "daily", "weekly", "monthly"
                ], format_func=lambda x: {
                    "daily": "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ",
                    "weekly": "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ", 
                    "monthly": "–ï–∂–µ–º–µ—Å—è—á–Ω–æ"
                }[x])
                
                task_config = st.text_area("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ (JSON)", value='{"enabled": true}')
                
                if st.form_submit_button("–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É"):
                    try:
                        config = json.loads(task_config)
                        task_id = automation_service.create_automation_task(
                            user_id, company_id, task_type, config, schedule_pattern
                        )
                        st.success(f"–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å ID: {task_id}")
                    except json.JSONDecodeError:
                        st.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞—á–∏
            st.markdown("### –ê–∫—Ç–∏–≤–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏")
            
            conn = get_db_connection()
            cursor = conn.cursor()
            cursor.execute("""
                SELECT * FROM automation_tasks 
                WHERE user_id = ? AND company_id = ? AND is_active = 1
                ORDER BY created_at DESC
            """, (user_id, company_id))
            tasks = cursor.fetchall()
            conn.close()
            
            if tasks:
                for task in tasks:
                    with st.expander(f"{task['task_type']} - {task['schedule_pattern']}"):
                        col_a, col_b, col_c = st.columns(3)
                        
                        with col_a:
                            st.write(f"**–°–æ–∑–¥–∞–Ω–∞:** {task['created_at'][:16]}")
                        with col_b:
                            st.write(f"**–ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—É—Å–∫:** {task['last_run'][:16] if task['last_run'] else '–ù–∏–∫–æ–≥–¥–∞'}")
                        with col_c:
                            st.write(f"**–°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫:** {task['next_run'][:16] if task['next_run'] else '–ù–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω'}")
                        
                        if st.button(f"–í—ã–ø–æ–ª–Ω–∏—Ç—å —Å–µ–π—á–∞—Å", key=f"run_{task['id']}"):
                            if automation_service.execute_automation_task(task['id']):
                                st.success("–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
                            else:
                                st.error("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏")
            else:
                st.info("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á")
        else:
            st.warning("–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω—É—é –∫–æ–º–ø–∞–Ω–∏—é –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏")

def show_team_management():
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π"""
    st.title("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π")
    
    company_id = st.session_state.get('active_company_id')
    if not company_id:
        st.warning("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–æ–π")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM companies WHERE id = ?", (company_id,))
    company = cursor.fetchone()
    conn.close()
    
    if not company:
        st.error("–ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    st.subheader(f"–ö–æ–º–∞–Ω–¥–∞ –∫–æ–º–ø–∞–Ω–∏–∏: {company['name']}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã
    team_members = get_company_team_members(company_id)
    
    if team_members:
        st.markdown("### –£—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã")
        
        for member in team_members:
            col1, col2, col3, col4 = st.columns([3, 2, 2, 2])
            
            with col1:
                avatar = "üë§" if not member['avatar_url'] else "üñºÔ∏è"
                st.markdown(f"{avatar} **{member['full_name'] or member['email']}**")
                st.caption(member['email'])
            
            with col2:
                role_colors = {
                    'owner': 'üî¥',
                    'admin': 'üü†', 
                    'editor': 'üü°',
                    'viewer': 'üü¢'
                }
                st.markdown(f"{role_colors.get(member['role'], '‚ö™')} {member['role'].title()}")
            
            with col3:
                st.caption(f"–° {member['joined_at'][:10]}")
            
            with col4:
                if member['id'] != st.session_state.user_id:
                    if st.button("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", key=f"manage_{member['id']}"):
                        st.session_state.selected_member = member['id']
    
    # –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    st.markdown("### –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É")
    
    with st.form("invite_form"):
        invite_email = st.text_input("Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        invite_role = st.selectbox("–†–æ–ª—å", ["viewer", "editor", "admin"])
        invite_message = st.text_area("–°–æ–æ–±—â–µ–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)")
        
        if st.form_submit_button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ"):
            if invite_email:
                token = invite_user_to_company(
                    company_id, 
                    invite_email, 
                    invite_role, 
                    st.session_state.user_id
                )
                st.success(f"–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {invite_email}")
                st.info(f"–¢–æ–∫–µ–Ω –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: {token}")
            else:
                st.error("–í–≤–µ–¥–∏—Ç–µ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    
    # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –∏ –∞–¥–º–∏–Ω–æ–≤)
    user_role = None
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT role FROM user_companies WHERE user_id = ? AND company_id = ?",
                  (st.session_state.user_id, company_id))
    result = cursor.fetchone()
    if result:
        user_role = result['role']
    conn.close()
    
    if user_role in ['owner', 'admin']:
        st.markdown("### –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏")
        
        switch_options = {f"{m['full_name'] or m['email']} ({m['email']})": m['id'] 
                         for m in team_members if m['id'] != st.session_state.user_id}
        
        if switch_options:
            selected_user = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è", 
                                       list(switch_options.keys()))
            
            if st.button("–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç"):
                target_user_id = switch_options[selected_user]
                if switch_user_context(st.session_state.user_id, target_user_id, company_id):
                    st.session_state.impersonated_user_id = target_user_id
                    st.session_state.original_user_id = st.session_state.user_id
                    st.success(f"–ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç: {selected_user}")
                    st.info("–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–≤–æ–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–í–µ—Ä–Ω—É—Ç—å—Å—è' –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
                else:
                    st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç")

def show_companies_management():
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏—è–º–∏ (–º—É–ª—å—Ç–∏–±–∏–∑–Ω–µ—Å)"""
    st.title("üè¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏—è–º–∏")
    
    if not st.session_state.get('premium_status'):
        st.warning("–§—É–Ω–∫—Ü–∏—è –º—É–ª—å—Ç–∏–±–∏–∑–Ω–µ—Å–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ü—Ä–µ–º–∏—É–º+ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        return
    
    user_id = st.session_state.user_id
    companies = get_user_companies(user_id)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π
    st.subheader("–í–∞—à–∏ –∫–æ–º–ø–∞–Ω–∏–∏")
    
    if companies:
        for company in companies:
            col1, col2, col3, col4 = st.columns([3, 2, 2, 2])
            
            with col1:
                logo = "üè¢" if not company['logo_url'] else "üñºÔ∏è"
                st.markdown(f"{logo} **{company['name']}**")
                if company['description']:
                    st.caption(company['description'])
            
            with col2:
                role_colors = {
                    'owner': 'üëë',
                    'admin': '‚≠ê', 
                    'editor': '‚úèÔ∏è',
                    'viewer': 'üëÅÔ∏è'
                }
                st.markdown(f"{role_colors.get(company['role'], '‚ùì')} {company['role'].title()}")
            
            with col3:
                is_active = st.session_state.get('active_company_id') == company['id']
                if is_active:
                    st.success("–ê–∫—Ç–∏–≤–Ω–∞")
                else:
                    if st.button("–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", key=f"activate_{company['id']}"):
                        st.session_state.active_company_id = company['id']
                        st.success(f"–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∫–æ–º–ø–∞–Ω–∏—è: {company['name']}")
                        st.rerun()
            
            with col4:
                if st.button("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", key=f"manage_company_{company['id']}"):
                    st.session_state.selected_company = company['id']
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
    st.subheader("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–º–ø–∞–Ω–∏—é")
    
    with st.form("create_company_form"):
        company_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏")
        company_description = st.text_area("–û–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)")
        
        if st.form_submit_button("–°–æ–∑–¥–∞—Ç—å –∫–æ–º–ø–∞–Ω–∏—é"):
            if company_name:
                new_company_id = create_company(user_id, company_name, company_description)
                st.success(f"–ö–æ–º–ø–∞–Ω–∏—è '{company_name}' —Å–æ–∑–¥–∞–Ω–∞!")
                st.rerun()
            else:
                st.error("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏")

def show_corporate_chat():
    """–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —á–∞—Ç"""
    st.title("üí¨ –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —á–∞—Ç")
    
    if not st.session_state.get('premium_status'):
        st.warning("–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —á–∞—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –ü—Ä–µ–º–∏—É–º+ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        return
    
    user_id = st.session_state.user_id
    company_id = st.session_state.get('active_company_id')
    
    if not company_id:
        st.warning("–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω—É—é –∫–æ–º–ø–∞–Ω–∏—é –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —á–∞—Ç–∞")
        return
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –∫–∞–Ω–∞–ª–∞–º–∏ –∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏
    with st.sidebar:
        st.subheader("–ö–∞–Ω–∞–ª—ã –∏ —á–∞—Ç—ã")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        with st.expander("–°–æ–∑–¥–∞—Ç—å –∫–∞–Ω–∞–ª"):
            with st.form("create_channel"):
                channel_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞")
                channel_description = st.text_area("–û–ø–∏—Å–∞–Ω–∏–µ")
                is_private = st.checkbox("–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª")
                
                if st.form_submit_button("–°–æ–∑–¥–∞—Ç—å"):
                    if channel_name:
                        channel_id = chat_service.create_channel(
                            company_id, channel_name, channel_description, is_private, user_id
                        )
                        st.success(f"–ö–∞–Ω–∞–ª '{channel_name}' —Å–æ–∑–¥–∞–Ω!")
                        st.rerun()
                    else:
                        st.error("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞")
        
        # –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
        channels = chat_service.get_user_channels(user_id, company_id)
        
        st.markdown("### –ö–∞–Ω–∞–ª—ã")
        for channel in channels:
            channel_icon = "üîí" if channel['is_private'] else "üì¢"
            unread_count = ""  # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Å—á–µ—Ç –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
            
            if st.button(f"{channel_icon} {channel['name']} {unread_count}", 
                        key=f"channel_{channel['id']}"):
                st.session_state.active_chat_type = 'channel'
                st.session_state.active_chat_id = channel['id']
                st.session_state.active_chat_name = channel['name']
                st.rerun()
        
        # –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        st.markdown("### –£—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã")
        team_members = get_company_team_members(company_id)
        
        for member in team_members:
            if member['id'] != user_id:  # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–±—è
                member_name = member['full_name'] or member['email']
                if st.button(f"üë§ {member_name}", key=f"dm_{member['id']}"):
                    st.session_state.active_chat_type = 'direct'
                    st.session_state.active_chat_id = member['id']
                    st.session_state.active_chat_name = member_name
                    st.rerun()
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å —á–∞—Ç–∞
    chat_type = st.session_state.get('active_chat_type')
    chat_id = st.session_state.get('active_chat_id')
    chat_name = st.session_state.get('active_chat_name', '–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç')
    
    if not chat_type or not chat_id:
        st.info("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –∏–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—â–µ–Ω–∏—è")
        return
    
    st.subheader(f"üí¨ {chat_name}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    if chat_type == 'channel':
        messages = chat_service.get_channel_messages(chat_id, limit=50)
    else:  # direct message
        messages = chat_service.get_direct_messages(user_id, chat_id, limit=50)
    
    # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
    messages_container = st.container()
    
    with messages_container:
        if messages:
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è (–≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ, —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª—É—á–∏–ª–∏ –ø–æ —É–±—ã–≤–∞–Ω–∏—é –≤—Ä–µ–º–µ–Ω–∏)
            for message in reversed(messages):
                is_own_message = message['sender_id'] == user_id
                
                # –°–æ–∑–¥–∞–µ–º —Å—Ç–∏–ª—å –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
                if is_own_message:
                    st.markdown(f"""
                    <div style="text-align: right; margin: 10px 0;">
                        <div style="background-color: #1f77b4; color: white; padding: 10px; border-radius: 15px; display: inline-block; max-width: 70%;">
                            <strong>–í—ã</strong><br>
                            {message['message']}
                            <br><small>{message['timestamp'][:16]}</small>
                            {' ‚úèÔ∏è' if message['is_edited'] else ''}
                        </div>
                    </div>
                    """, unsafe_allow_html=True)
                else:
                    st.markdown(f"""
                    <div style="text-align: left; margin: 10px 0;">
                        <div style="background-color: #f1f3f4; color: #333; padding: 10px; border-radius: 15px; display: inline-block; max-width: 70%;">
                            <strong>{message['full_name'] or message['email']}</strong><br>
                            {message['message']}
                            <br><small>{message['timestamp'][:16]}</small>
                            {' ‚úèÔ∏è' if message['is_edited'] else ''}
                        </div>
                    </div>
                    """, unsafe_allow_html=True)
        else:
            st.info("–°–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç. –ù–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ!")
    
    # –§–æ—Ä–º–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    st.markdown("---")
    
    with st.form("send_message", clear_on_submit=True):
        col1, col2 = st.columns([4, 1])
        
        with col1:
            new_message = st.text_area("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...", height=100, key="message_input")
        
        with col2:
            st.markdown("<br>", unsafe_allow_html=True)  # –û—Ç—Å—Ç—É–ø
            send_button = st.form_submit_button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å", type="primary")
        
        if send_button and new_message.strip():
            if chat_type == 'channel':
                message_id = chat_service.send_message(
                    sender_id=user_id,
                    message=new_message.strip(),
                    channel_id=chat_id,
                    company_id=company_id
                )
            else:  # direct message
                message_id = chat_service.send_message(
                    sender_id=user_id,
                    message=new_message.strip(),
                    receiver_id=chat_id,
                    company_id=company_id
                )
            
            if message_id:
                st.success("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
                st.rerun()
            else:
                st.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–º (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
    if chat_type == 'channel':
        with st.expander("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–º"):
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown("#### –î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞")
                team_members = get_company_team_members(company_id)
                available_members = [m for m in team_members if m['id'] != user_id]
                
                if available_members:
                    selected_member = st.selectbox(
                        "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞",
                        available_members,
                        format_func=lambda x: x['full_name'] or x['email']
                    )
                    
                    if st.button("–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–∞–Ω–∞–ª"):
                        if chat_service.add_user_to_channel(chat_id, selected_member['id']):
                            st.success(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {selected_member['full_name'] or selected_member['email']} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª")
                        else:
                            st.error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –∫–∞–Ω–∞–ª–µ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
            
            with col2:
                st.markdown("#### –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
                if st.button("–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"):
                    st.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

def show_notification_settings():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    st.title("üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    
    user_id = st.session_state.user_id
    current_settings = notification_service.get_user_notification_settings(user_id)
    
    st.markdown("### –¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    
    notification_types = {
        'chat': '–°–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ',
        'orders': '–ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã',
        'inventory': '–°–∫–ª–∞–¥—Å–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏',
        'marketing': '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏',
        'system': '–°–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'
    }
    
    delivery_methods = {
        'email': 'Email',
        'sms': 'SMS',
        'push': 'Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'
    }
    
    updated_settings = {}
    
    for ntype, ntype_name in notification_types.items():
        st.subheader(ntype_name)
        
        cols = st.columns(len(delivery_methods))
        
        for i, (method, method_name) in enumerate(delivery_methods.items()):
            with cols[i]:
                current_value = current_settings.get(ntype, {}).get(method, True)
                new_value = st.checkbox(
                    method_name,
                    value=current_value,
                    key=f"{ntype}_{method}"
                )
                
                if ntype not in updated_settings:
                    updated_settings[ntype] = {}
                updated_settings[ntype][method] = new_value
    
    if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", type="primary"):
        for ntype, methods in updated_settings.items():
            for method, enabled in methods.items():
                notification_service.update_notification_settings(
                    user_id, ntype, method, enabled
                )
        
        st.success("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")

def show_integrations():
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∏ —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"""
    st.title("üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∏ —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
    
    if not st.session_state.get('premium_status'):
        st.warning("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –ü—Ä–µ–º–∏—É–º+ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        return
    
    user_id = st.session_state.user_id
    company_id = st.session_state.get('active_company_id')
    
    tab1, tab2, tab3, tab4 = st.tabs(["–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏", "–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", "–ú–µ—Å—Å–µ–Ω–¥–∂–µ—Ä—ã", "–†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏"])
    
    with tab1:
        st.subheader("üè¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏")
        
        # –°–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
        if company_id:
            integrations = integration_service.get_user_integrations(user_id, company_id)
            
            if integrations:
                st.markdown("### –ê–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
                for integration in integrations:
                    with st.expander(f"{integration['integration_type'].upper()} - {integration['created_at'][:16]}"):
                        col1, col2, col3 = st.columns(3)
                        
                        with col1:
                            st.write(f"**–¢–∏–ø:** {integration['integration_type']}")
                            st.write(f"**–°—Ç–∞—Ç—É—Å:** {'üü¢ –ê–∫—Ç–∏–≤–Ω–∞' if integration['is_active'] else 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}")
                        
                        with col2:
                            st.write(f"**–°–æ–∑–¥–∞–Ω–∞:** {integration['created_at'][:16]}")
                            last_sync = integration['last_sync']
                            st.write(f"**–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è:** {last_sync[:16] if last_sync else '–ù–∏–∫–æ–≥–¥–∞'}")
                        
                        with col3:
                            if integration['integration_type'] == '1c':
                                if st.button("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑ 1–°", key=f"sync_from_{integration['id']}"):
                                    result = integration_service.sync_data_from_1c(integration['id'])
                                    if result['success']:
                                        st.success(result['message'])
                                    else:
                                        st.error(result['message'])
                                
                                if st.button("–≠–∫—Å–ø–æ—Ä—Ç –≤ 1–°", key=f"sync_to_{integration['id']}"):
                                    result = integration_service.export_data_to_1c(integration['id'])
                                    if result['success']:
                                        st.success(result['message'])
                                    else:
                                        st.error(result['message'])
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        st.markdown("### –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é")
        
        integration_type = st.selectbox("–¢–∏–ø –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏", [
            "1c", "crm", "whatsapp", "telegram"
        ], format_func=lambda x: {
            "1c": "1–°:–ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ",
            "crm": "CRM —Å–∏—Å—Ç–µ–º–∞",
            "whatsapp": "WhatsApp Business",
            "telegram": "Telegram Bot"
        }[x])
        
        if integration_type == "1c":
            st.markdown("#### –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ 1–°")
            with st.form("1c_integration"):
                server_url = st.text_input("URL —Å–µ—Ä–≤–µ—Ä–∞ 1–°", placeholder="http://localhost:8080/demo/hs/api/")
                database = st.text_input("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", placeholder="demo_database")
                username = st.text_input("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", placeholder="admin")
                password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")
                
                if st.form_submit_button("–°–æ–∑–¥–∞—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é"):
                    config = {
                        'server_url': server_url,
                        'database': database,
                        'username': username,
                        'password': password
                    }
                    
                    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                    test_result = integration_service.test_integration_connection("1c", config)
                    
                    if test_result['success']:
                        integration_id = integration_service.create_integration(
                            user_id, company_id, "1c", config
                        )
                        st.success(f"–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å 1–° —Å–æ–∑–¥–∞–Ω–∞! ID: {integration_id}")
                        st.rerun()
                    else:
                        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {test_result['message']}")
        
        elif integration_type == "crm":
            st.markdown("#### –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ CRM")
            with st.form("crm_integration"):
                crm_type = st.selectbox("–¢–∏–ø CRM", ["bitrix24", "amoCRM", "Pipedrive"])
                api_url = st.text_input("API URL", placeholder="https://your-domain.bitrix24.ru/rest/")
                api_key = st.text_input("API –∫–ª—é—á", type="password")
                
                if st.form_submit_button("–°–æ–∑–¥–∞—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é"):
                    config = {
                        'crm_type': crm_type,
                        'api_url': api_url,
                        'api_key': api_key
                    }
                    
                    test_result = integration_service.test_integration_connection("crm", config)
                    
                    if test_result['success']:
                        integration_id = integration_service.create_integration(
                            user_id, company_id, "crm", config
                        )
                        st.success(f"–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CRM —Å–æ–∑–¥–∞–Ω–∞! ID: {integration_id}")
                        st.rerun()
                    else:
                        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {test_result['message']}")
    
    with tab2:
        st.subheader("üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
        
        if company_id:
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown("#### –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel")
                
                data_type = st.selectbox("–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö", [
                    "orders", "inventory", "customers", "financial"
                ], format_func=lambda x: {
                    "orders": "–ó–∞–∫–∞–∑—ã",
                    "inventory": "–°–∫–ª–∞–¥",
                    "customers": "–ö–ª–∏–µ–Ω—Ç—ã",
                    "financial": "–§–∏–Ω–∞–Ω—Å—ã"
                }[x])
                
                col_date1, col_date2 = st.columns(2)
                with col_date1:
                    date_from = st.date_input("–° –¥–∞—Ç—ã", value=datetime.now() - timedelta(days=30))
                with col_date2:
                    date_to = st.date_input("–ü–æ –¥–∞—Ç—É", value=datetime.now())
                
                if st.button("–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel", type="primary"):
                    try:
                        excel_data = export_service.export_to_excel(
                            user_id, company_id, data_type, 
                            date_from.isoformat(), date_to.isoformat()
                        )
                        
                        st.download_button(
                            label="–°–∫–∞—á–∞—Ç—å Excel —Ñ–∞–π–ª",
                            data=excel_data,
                            file_name=f"{data_type}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
                            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                        )
                        
                        st.success("Excel —Ñ–∞–π–ª –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é!")
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {str(e)}")
            
            with col2:
                st.markdown("#### –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV")
                
                csv_data_type = st.selectbox("–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö –¥–ª—è CSV", [
                    "orders", "inventory"
                ], format_func=lambda x: {
                    "orders": "–ó–∞–∫–∞–∑—ã",
                    "inventory": "–°–∫–ª–∞–¥"
                }[x], key="csv_type")
                
                if st.button("–≠–∫—Å–ø–æ—Ä—Ç –≤ CSV"):
                    try:
                        csv_data = export_service.export_to_csv(user_id, company_id, csv_data_type)
                        
                        st.download_button(
                            label="–°–∫–∞—á–∞—Ç—å CSV —Ñ–∞–π–ª",
                            data=csv_data,
                            file_name=f"{csv_data_type}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                            mime="text/csv"
                        )
                        
                        st.success("CSV —Ñ–∞–π–ª –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é!")
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {str(e)}")
        else:
            st.warning("–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω—É—é –∫–æ–º–ø–∞–Ω–∏—é –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö")
    
    with tab3:
        st.subheader("üí¨ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞–º–∏")
        
        if company_id:
            # WhatsApp Business
            st.markdown("#### WhatsApp Business API")
            
            with st.form("whatsapp_message"):
                phone_number = st.text_input("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", placeholder="+7XXXXXXXXXX")
                message_text = st.text_area("–°–æ–æ–±—â–µ–Ω–∏–µ", placeholder="–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –ë–∏–∑–Ω–µ—Å –ú–µ–Ω–µ–¥–∂–µ—Ä–∞")
                
                if st.form_submit_button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ WhatsApp"):
                    if phone_number and message_text:
                        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º API
                        result = integration_service.send_whatsapp_message(0, phone_number, message_text)
                        if result['success']:
                            st.success("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ WhatsApp!")
                        else:
                            st.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
                    else:
                        st.error("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")
            
            # Telegram Bot
            st.markdown("#### Telegram Bot API")
            
            with st.form("telegram_message"):
                chat_id = st.text_input("Chat ID", placeholder="@username –∏–ª–∏ —á–∏—Å–ª–æ–≤–æ–π ID")
                telegram_message = st.text_area("–°–æ–æ–±—â–µ–Ω–∏–µ", placeholder="–ü—Ä–∏–≤–µ—Ç –∏–∑ –ë–∏–∑–Ω–µ—Å –ú–µ–Ω–µ–¥–∂–µ—Ä–∞!")
                
                if st.form_submit_button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram"):
                    if chat_id and telegram_message:
                        result = integration_service.send_telegram_message(0, chat_id, telegram_message)
                        if result['success']:
                            st.success("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram!")
                        else:
                            st.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
                    else:
                        st.error("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")
            
            # –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞
            st.markdown("#### –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞–º")
            
            with st.form("bulk_messaging"):
                message_subject = st.text_input("–¢–µ–º–∞ —Å–æ–æ–±—â–µ–Ω–∏—è")
                message_body = st.text_area("–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è", 
                                          placeholder="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ {name} –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏")
                
                messaging_type = st.selectbox("–°–ø–æ—Å–æ–± –æ—Ç–ø—Ä–∞–≤–∫–∏", [
                    "email", "whatsapp", "telegram"
                ], format_func=lambda x: {
                    "email": "Email —Ä–∞—Å—Å—ã–ª–∫–∞",
                    "whatsapp": "WhatsApp —Ä–∞—Å—Å—ã–ª–∫–∞",
                    "telegram": "Telegram —Ä–∞—Å—Å—ã–ª–∫–∞"
                }[x])
                
                if st.form_submit_button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"):
                    if message_subject and message_body:
                        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å customer_communication
                        st.success(f"–†–∞—Å—Å—ã–ª–∫–∞ —á–µ—Ä–µ–∑ {messaging_type} –∑–∞–ø—É—â–µ–Ω–∞!")
                        st.info("–í –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ —Ä–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Ä–µ–∞–ª—å–Ω–æ")
                    else:
                        st.error("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")
        else:
            st.warning("–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω—É—é –∫–æ–º–ø–∞–Ω–∏—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞–º–∏")
    
    with tab4:
        st.subheader("üíæ –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏")
        
        if company_id:
            st.markdown("#### –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")
            
            backup_scope = st.radio("–û–±–ª–∞—Å—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è", [
                "current_company", "all_companies"
            ], format_func=lambda x: {
                "current_company": "–¢–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∞—è –∫–æ–º–ø–∞–Ω–∏—è",
                "all_companies": "–í—Å–µ –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
            }[x])
            
            if st.button("–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é", type="primary"):
                try:
                    if backup_scope == "current_company":
                        backup_data = export_service.create_backup_archive(user_id, company_id)
                        filename = f"backup_company_{company_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.zip"
                    else:
                        backup_data = export_service.create_backup_archive(user_id)
                        filename = f"backup_all_companies_{datetime.now().strftime('%Y%m%d_%H%M%S')}.zip"
                    
                    st.download_button(
                        label="–°–∫–∞—á–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é",
                        data=backup_data,
                        file_name=filename,
                        mime="application/zip"
                    )
                    
                    st.success("–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é!")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –≤ –ë–î
                    conn = get_db_connection()
                    cursor = conn.cursor()
                    cursor.execute("""
                        INSERT INTO backup_jobs (user_id, backup_type, file_size, status, completed_at)
                        VALUES (?, ?, ?, 'completed', CURRENT_TIMESTAMP)
                    """, (user_id, backup_scope, len(backup_data)))
                    conn.commit()
                    conn.close()
                    
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {str(e)}")
            
            # –ò—Å—Ç–æ—Ä–∏—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
            st.markdown("#### –ò—Å—Ç–æ—Ä–∏—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π")
            
            conn = get_db_connection()
            cursor = conn.cursor()
            cursor.execute("""
                SELECT * FROM backup_jobs 
                WHERE user_id = ? 
                ORDER BY started_at DESC 
                LIMIT 10
            """, (user_id,))
            backups = cursor.fetchall()
            conn.close()
            
            if backups:
                for backup in backups:
                    with st.expander(f"–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –æ—Ç {backup['started_at'][:16]}"):
                        col1, col2, col3 = st.columns(3)
                        
                        with col1:
                            st.write(f"**–¢–∏–ø:** {backup['backup_type']}")
                            st.write(f"**–°—Ç–∞—Ç—É—Å:** {backup['status']}")
                        
                        with col2:
                            if backup['file_size']:
                                size_mb = backup['file_size'] / (1024 * 1024)
                                st.write(f"**–†–∞–∑–º–µ—Ä:** {size_mb:.2f} –ú–ë")
                            st.write(f"**–ó–∞–≤–µ—Ä—à–µ–Ω–∞:** {backup['completed_at'][:16] if backup['completed_at'] else '–ù–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞'}")
                        
                        with col3:
                            if backup['status'] == 'completed':
                                st.success("‚úÖ –£—Å–ø–µ—à–Ω–æ")
                            else:
                                st.error("‚ùå –û—à–∏–±–∫–∞")
            else:
                st.info("–ò—Å—Ç–æ—Ä–∏—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π –ø—É—Å—Ç–∞")
        else:
            st.warning("–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω—É—é –∫–æ–º–ø–∞–Ω–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π")

# –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
def main():
    init_enhanced_db()
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏
    apply_custom_css()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–±–∏–ª—å–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏ PWA
    initialize_mobile_pwa()
    
    # –°–æ–∑–¥–∞–µ–º –≥–∞–º–±—É—Ä–≥–µ—Ä –º–µ–Ω—é
    create_hamburger_menu()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if not st.session_state.get('logged_in'):
        show_login_page()
        return
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–∞–º–±—É—Ä–≥–µ—Ä –º–µ–Ω—é
    show_hamburger_menu()
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if 'current_page' not in st.session_state:
        st.session_state.current_page = 'dashboard'
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
    page = st.session_state.current_page
    
    if page == 'dashboard':
        show_dashboard()
    elif page == 'ai_features':
        show_ai_features()
    elif page == 'team':
        show_team_management()
    elif page == 'companies':
        show_companies_management()
    elif page == 'settings':
        st.title("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        st.info("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    elif page == 'chat':
        show_corporate_chat()
    elif page == 'automation':
        st.title("üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è")
        st.info("–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    elif page == 'integrations':
        show_integrations()
    elif page == 'admin' and st.session_state.get('is_admin'):
        st.title("üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        st.info("–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    else:
        show_dashboard()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ —Å–∞–π–¥–±–∞—Ä–µ
    with st.sidebar:
        st.markdown("### –ü—Ä–æ—Ñ–∏–ª—å")
        st.write(f"üë§ {st.session_state.get('user_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')}")
        st.write(f"üìß {st.session_state.get('user_email')}")
        
        if st.session_state.get('premium_status'):
            st.markdown('<span class="premium-badge">–ü–†–ï–ú–ò–£–ú+</span>', unsafe_allow_html=True)
        
        if st.session_state.get('impersonated_user_id'):
            st.warning("–í—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ –æ—Ç –∏–º–µ–Ω–∏ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            if st.button("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–≤–æ–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É"):
                del st.session_state.impersonated_user_id
                del st.session_state.original_user_id
                st.rerun()
        
        if st.button("–í—ã–π—Ç–∏"):
            for key in list(st.session_state.keys()):
                del st.session_state[key]
            st.rerun()

if __name__ == "__main__":
    main()

