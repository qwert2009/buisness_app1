
# --- –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è, —Ä–æ–ª–∏, –∫–æ–º–∞–Ω–¥—ã, –∏–º–ø–µ—Ä—Å–æ–Ω–∞—Ü–∏—è ---
import yaml
import streamlit as st
import streamlit_authenticator as stauth

# –ü—Ä–∏–º–µ—Ä —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Ä–æ–ª–µ–π (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π YAML-—Ñ–∞–π–ª)
users_config = {
    'credentials': {
        'usernames': {
            'alexkurumbayev@gmail.com': {
                'email': 'alexkurumbayev@gmail.com',
                'name': 'Alex Kurumbayev',
                'password': stauth.Hasher(['qwerty123G']).generate()[0],
                'role': 'admin',
            },
        }
    },
    'cookie': {
        'expiry_days': 7,
        'key': 'streamlit_auth',
        'name': 'streamlit_auth',
    },
    'preauthorized': {
        'emails': ["alexkurumbayev@gmail.com"]
    }
}

def get_user_role(username):
    return users_config['credentials']['usernames'].get(username, {}).get('role', 'viewer')

def is_admin():
    return st.session_state.get('user_role') == 'admin'

def is_editor():
    return st.session_state.get('user_role') in ['admin', 'editor']

def is_viewer():
    return st.session_state.get('user_role') in ['admin', 'editor', 'viewer']

def impersonate_user(username):
    st.session_state['impersonated_user'] = username
    st.session_state['user_role'] = get_user_role(username)

def stop_impersonation():
    if 'impersonated_user' in st.session_state:
        del st.session_state['impersonated_user']
        st.session_state['user_role'] = get_user_role(st.session_state.get('username'))


def show_login():
    authenticator = stauth.Authenticate(
        users_config['credentials'],
        users_config['cookie']['name'],
        users_config['cookie']['key'],
        users_config['cookie']['expiry_days'],
        users_config['preauthorized']
    )
    name, authentication_status, username = authenticator.login('–í—Ö–æ–¥', 'main')
    if authentication_status:
        st.session_state['username'] = username
        st.session_state['user_role'] = get_user_role(username)
        st.success(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {name}!")
        authenticator.logout('–í—ã–π—Ç–∏', 'sidebar')
        return True
    elif authentication_status is False:
        st.error('–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å')

    # --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
    with st.expander('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'):
        reg_email = st.text_input('Email –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏')
        reg_name = st.text_input('–ò–º—è')
        reg_password = st.text_input('–ü–∞—Ä–æ–ª—å', type='password')
        reg_role = st.selectbox('–†–æ–ª—å', ['viewer', 'editor'])
        if st.button('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'):
            if reg_email and reg_password and reg_name:
                if reg_email in users_config['credentials']['usernames']:
                    st.warning('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.')
                else:
                    users_config['credentials']['usernames'][reg_email] = {
                        'email': reg_email,
                        'name': reg_name,
                        'password': stauth.Hasher([reg_password]).generate()[0],
                        'role': reg_role,
                    }
                    st.success('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! –¢–µ–ø–µ—Ä—å –≤–æ–π–¥–∏—Ç–µ.')
            else:
                st.warning('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.')
    return False

def show_impersonation_panel():
    if is_admin():
        st.sidebar.markdown('---')
        st.sidebar.subheader('–ò–º–ø–µ—Ä—Å–æ–Ω–∞—Ü–∏—è (Switch User)')
        usernames = list(users_config['credentials']['usernames'].keys())
        selected = st.sidebar.selectbox('–í—ã–±—Ä–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', usernames)
        if st.sidebar.button('–ü–µ—Ä–µ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç'):
            impersonate_user(selected)
            st.sidebar.success(f'–í—ã –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ {selected}')
        if 'impersonated_user' in st.session_state:
            st.sidebar.info(f'–°–µ–π—á–∞—Å –≤—ã –∫–∞–∫: {st.session_state["impersonated_user"]}')
            if st.sidebar.button('–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–≤–æ–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É'):
                stop_impersonation()

# --- –í—Ö–æ–¥ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
if 'user_role' not in st.session_state:
    if not show_login():
        st.stop()

# --- –ò–º–ø–µ—Ä—Å–æ–Ω–∞—Ü–∏—è ---
show_impersonation_panel()
# --- –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á (–±–∞–∑–æ–≤–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è) ---
from threading import Thread
import time as _time
import schedule

def run_scheduler():
    while True:
        schedule.run_pending()
        _time.sleep(1)

def schedule_daily_report(user_id):
    schedule.every().day.at("08:00").do(send_daily_report, user_id)

def schedule_monthly_report(user_id):
    schedule.every(30).days.at("08:00").do(send_daily_report, user_id)

def start_automation_for_user(user_id, daily=True, monthly=False):
    if daily:
        schedule_daily_report(user_id)
    if monthly:
        schedule_monthly_report(user_id)
    Thread(target=run_scheduler, daemon=True).start()

import streamlit as st
import pandas as pd
import sqlite3
import hashlib
import smtplib
import ssl
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import json
import os
import io
import base64
import time
from typing import Optional, List, Dict, Tuple, Any
import random
import string

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ë–∏–∑–Ω–µ—Å –ú–µ–Ω–µ–¥–∂–µ—Ä",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# –ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω (CSS)
st.markdown("""
<style>
    /* ... CSS ... (–æ—Å—Ç–∞–≤—å—Ç–µ –∫–∞–∫ –µ—Å—Ç—å, –¥–æ </style>) ... */
</style>
""", unsafe_allow_html=True)

def show_modern_navigation():
    """–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"""
   
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    unread_count = get_unread_notifications_count(st.session_state.user_id)
   
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ (–º—É–ª—å—Ç–∏–±–∏–∑–Ω–µ—Å)
    if 'active_company_id' in st.session_state:
        conn = sqlite3.connect('business_manager.db')
        cursor = conn.cursor()
        cursor.execute('SELECT name FROM companies WHERE id = ?', (st.session_state.active_company_id,))
        cname = cursor.fetchone()
        if cname:
            st.info(f"–¢–µ–∫—É—â–∞—è –∫–æ–º–ø–∞–Ω–∏—è: {cname[0]}")
        conn.close()
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–ª–æ–Ω–æ–∫
    col1, col2, col3, col4, col5, col6, col7, col8 = st.columns(8)
   
    with col1:
        if st.button("üìä –ü–∞–Ω–µ–ª—å", use_container_width=True,
                    type="primary" if st.session_state.current_page == "dashboard" else "secondary"):
            st.session_state.current_page = "dashboard"
            st.rerun()
   
    with col2:
        if st.button("üì¶ –ó–∞–∫–∞–∑—ã", use_container_width=True,
                    type="primary" if st.session_state.current_page == "orders" else "secondary"):
            st.session_state.current_page = "orders"
            st.rerun()
   
    with col3:
        if st.button("üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", use_container_width=True,
                    type="primary" if st.session_state.current_page == "order_management" else "secondary"):
            st.session_state.current_page = "order_management"
            st.rerun()
   
    with col4:
        if st.button("üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", use_container_width=True,
                    type="primary" if st.session_state.current_page == "analytics" else "secondary"):
            st.session_state.current_page = "analytics"
            st.rerun()
   
    with col5:
        if st.button("üè™ –°–∫–ª–∞–¥", use_container_width=True,
                    type="primary" if st.session_state.current_page == "inventory" else "secondary"):
            st.session_state.current_page = "inventory"
            st.rerun()
   
    with col6:
        # –ö–Ω–æ–ø–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º
        notification_button_type = "primary" if st.session_state.current_page == "notifications" else "secondary"
        if unread_count > 0:
            button_label = f"üîî ({unread_count})"
        else:
            button_label = "üîî"
           
        if st.button(button_label, use_container_width=True, type=notification_button_type):
            st.session_state.current_page = "notifications"
            st.rerun()
   
    with col7:
        if st.button("üß† –ò–ò", use_container_width=True,
                    type="primary" if st.session_state.current_page == "smart" else "secondary"):
            st.session_state.current_page = "smart"
            st.rerun()
   
    with col8:
        if st.button("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", use_container_width=True,
                    type="primary" if st.session_state.current_page == "settings" else "secondary"):
            st.session_state.current_page = "settings"
            st.rerun()

def show_admin_navigation():
    """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if st.session_state.get('is_admin', False):
        st.markdown('---')
        st.markdown('### üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')
       
        # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏
        col1, col2, col3, col4, col5 = st.columns(5)
       
        with col1:
            if st.button("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", use_container_width=True,
                        type="primary" if st.session_state.get('admin_page') == "users" else "secondary",
                        key="admin_users_btn"):
                st.session_state.admin_page = "users"
                st.session_state.current_page = "admin"
                st.rerun()
       
        with col2:
            if st.button("üí≥ –ü–ª–∞—Ç–µ–∂–∏", use_container_width=True,
                        type="primary" if st.session_state.get('admin_page') == "payments" else "secondary",
                        key="admin_payments_btn"):
                st.session_state.admin_page = "payments"
                st.session_state.current_page = "admin"
                st.rerun()
       
        with col3:
            if st.button("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", use_container_width=True,
                        type="primary" if st.session_state.get('admin_page') == "stats" else "secondary",
                        key="admin_stats_btn"):
                st.session_state.admin_page = "stats"
                st.session_state.current_page = "admin"
                st.rerun()
       
        with col4:
            if st.button("üìà –û—Ç—á–µ—Ç—ã", use_container_width=True,
                        type="primary" if st.session_state.get('admin_page') == "reports" else "secondary",
                        key="admin_reports_btn"):
                st.session_state.admin_page = "reports"
                st.session_state.current_page = "admin"
                st.rerun()
       
        with col5:
            if st.button("‚öôÔ∏è –ê–¥–º–∏–Ω –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", use_container_width=True,
                        type="primary" if st.session_state.get('admin_page') == "admin_settings" else "secondary",
                        key="admin_settings_btn"):
                st.session_state.admin_page = "admin_settings"
                st.session_state.current_page = "admin"
                st.rerun()
       
        st.markdown('---')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    # –î–æ–±–∞–≤–ª—è–µ–º warehouse_id –≤ inventory, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    try:
        cursor.execute("ALTER TABLE inventory ADD COLUMN warehouse_id INTEGER")
    except Exception:
        pass
    conn = sqlite3.connect('business_manager.db')
    cursor = conn.cursor()
   
    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            email TEXT UNIQUE NOT NULL,
            password_hash TEXT NOT NULL,
            phone TEXT,
            full_name TEXT,
            business_name TEXT,
            is_admin BOOLEAN DEFAULT FALSE,
            premium_status BOOLEAN DEFAULT FALSE,
            premium_start_date TIMESTAMP,
            premium_end_date TIMESTAMP,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            last_login TIMESTAMP
        )
    ''')
   
    # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–∫–∞–∑–æ–≤
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS orders (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            order_type TEXT NOT NULL,
            order_name TEXT NOT NULL,
            total_payment REAL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            delivery_type TEXT,
            notification_sent INTEGER DEFAULT 0,
            FOREIGN KEY (user_id) REFERENCES users (id)
        )
    ''')
   
    # –¢–∞–±–ª–∏—Ü–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∑–∞–∫–∞–∑–∞—Ö
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS order_items (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            order_id INTEGER,
            product_name TEXT NOT NULL,
            quantity INTEGER NOT NULL,
            cost_price REAL NOT NULL,
            sale_price REAL DEFAULT 0,
            weight REAL NOT NULL,
            delivery_cost REAL,
            total_cost REAL,
            FOREIGN KEY (order_id) REFERENCES orders (id)
        )
    ''')
   
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É sale_price –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    try:
        cursor.execute('ALTER TABLE order_items ADD COLUMN sale_price REAL DEFAULT 0')
    except sqlite3.OperationalError:
        pass  # –ö–æ–ª–æ–Ω–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
   
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É delivery_type –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    try:
        cursor.execute('ALTER TABLE order_items ADD COLUMN item_delivery_type TEXT DEFAULT "truck"')
    except sqlite3.OperationalError:
        pass  # –ö–æ–ª–æ–Ω–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
   
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–æ–≤
    try:
        cursor.execute('ALTER TABLE orders ADD COLUMN status TEXT DEFAULT "pending"')
    except sqlite3.OperationalError:
        pass  # –ö–æ–ª–æ–Ω–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
   
    try:
        cursor.execute('ALTER TABLE orders ADD COLUMN expected_delivery_date TIMESTAMP')
    except sqlite3.OperationalError:
        pass  # –ö–æ–ª–æ–Ω–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
   
    try:
        cursor.execute('ALTER TABLE orders ADD COLUMN actual_delivery_date TIMESTAMP')
    except sqlite3.OperationalError:
        pass  # –ö–æ–ª–æ–Ω–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
   
    try:
        cursor.execute('ALTER TABLE orders ADD COLUMN delay_notification_sent INTEGER DEFAULT 0')
    except sqlite3.OperationalError:
        pass  # –ö–æ–ª–æ–Ω–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
   
    # –¢–∞–±–ª–∏—Ü–∞ —Å–∫–ª–∞–¥–∞
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS inventory (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            product_name TEXT NOT NULL,
            quantity INTEGER NOT NULL,
            link TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users (id)
        )
    ''')
   
    # –¢–∞–±–ª–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤ (–¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–≤–æ–∑—è—Ç—Å—è –ø–æ–¥ –∑–∞–∫–∞–∑)
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS order_history (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            order_id INTEGER,
            product_name TEXT NOT NULL,
            quantity INTEGER NOT NULL,
            cost_price REAL NOT NULL,
            sale_price REAL NOT NULL,
            weight REAL NOT NULL,
            delivery_type TEXT DEFAULT "truck",
            delivery_cost REAL NOT NULL,
            total_cost REAL NOT NULL,
            order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            status TEXT DEFAULT "completed",
            FOREIGN KEY (user_id) REFERENCES users (id),
            FOREIGN KEY (order_id) REFERENCES orders (id)
        )
    ''')
   
    # –¢–∞–±–ª–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS settings (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            financial_cushion_percent REAL DEFAULT 20.0,
            email_notifications BOOLEAN DEFAULT 1,
            smtp_server TEXT,
            smtp_port INTEGER DEFAULT 587,
            email_username TEXT,
            email_password TEXT,
            notify_new_orders BOOLEAN DEFAULT 1,
            notify_low_stock BOOLEAN DEFAULT 1,
            notify_daily_report BOOLEAN DEFAULT 0,
            FOREIGN KEY (user_id) REFERENCES users (id)
        )
    ''')
   
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É settings, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    try:
        cursor.execute("ALTER TABLE settings ADD COLUMN notify_new_orders BOOLEAN DEFAULT 1")
    except sqlite3.OperationalError:
        pass  # –ü–æ–ª–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
   
    try:
        cursor.execute("ALTER TABLE settings ADD COLUMN notify_low_stock BOOLEAN DEFAULT 1")
    except sqlite3.OperationalError:
        pass  # –ü–æ–ª–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
       
    try:
        cursor.execute("ALTER TABLE settings ADD COLUMN notify_daily_report BOOLEAN DEFAULT 0")
    except sqlite3.OperationalError:
        pass  # –ü–æ–ª–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
   
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –¥–ª—è —Ü–µ–Ω –¥–æ—Å—Ç–∞–≤–∫–∏
    try:
        cursor.execute("ALTER TABLE settings ADD COLUMN airplane_price_per_kg REAL DEFAULT 5.0")
    except (sqlite3.OperationalError, sqlite3.ProgrammingError):
        pass  # –ü–æ–ª–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
   
    try:
        cursor.execute("ALTER TABLE settings ADD COLUMN truck_price_per_kg REAL DEFAULT 2.0")
    except (sqlite3.OperationalError, sqlite3.ProgrammingError):
        pass  # –ü–æ–ª–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
   
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏, —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π
    cursor.execute("UPDATE settings SET notify_new_orders = 1 WHERE notify_new_orders IS NULL")
    cursor.execute("UPDATE settings SET notify_low_stock = 1 WHERE notify_low_stock IS NULL")
    cursor.execute("UPDATE settings SET notify_daily_report = 0 WHERE notify_daily_report IS NULL")
    cursor.execute("UPDATE settings SET airplane_price_per_kg = 5.0 WHERE airplane_price_per_kg IS NULL")
    cursor.execute("UPDATE settings SET truck_price_per_kg = 2.0 WHERE truck_price_per_kg IS NULL")

    # –¢–∞–±–ª–∏—Ü–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS notifications (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            message TEXT NOT NULL,
            is_read BOOLEAN DEFAULT FALSE,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users (id)
        )
    ''')
   
    # –¢–∞–±–ª–∏—Ü–∞ –∫–æ–º–ø–∞–Ω–∏–π (–¥–ª—è –º—É–ª—å—Ç–∏–±–∏–∑–Ω–µ—Å–∞)
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS companies (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            owner_id INTEGER NOT NULL,
            name TEXT NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (owner_id) REFERENCES users (id)
        )
    ''')
   
    # –¢–∞–±–ª–∏—Ü–∞ —Å–≤—è–∑–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∫–æ–º–ø–∞–Ω–∏—è–º–∏ (–¥–ª—è –≥–∏–±–∫–æ–π —Ä–æ–ª–µ–≤–æ–π –º–æ–¥–µ–ª–∏)
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS user_companies (
            user_id INTEGER NOT NULL,
            company_id INTEGER NOT NULL,
            role TEXT NOT NULL, -- 'owner', 'admin', 'editor', 'viewer'
            PRIMARY KEY (user_id, company_id),
            FOREIGN KEY (user_id) REFERENCES users (id),
            FOREIGN KEY (company_id) REFERENCES companies (id)
        )
    ''')
   
    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∫–ª–∞–¥–∞—Ö (–¥–ª—è –º—É–ª—å—Ç–∏—Å–∫–ª–∞–¥–∞)
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS warehouses (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            company_id INTEGER NOT NULL,
            name TEXT NOT NULL,
            location TEXT,
            FOREIGN KEY (company_id) REFERENCES companies (id)
        )
    ''')
   
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É company_id –≤ inventory, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
    try:
        cursor.execute("ALTER TABLE inventory ADD COLUMN company_id INTEGER")
    except sqlite3.OperationalError:
        pass  # –ö–æ–ª–æ–Ω–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
   
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É company_id –≤ orders, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
    try:
        cursor.execute("ALTER TABLE orders ADD COLUMN company_id INTEGER")
    except sqlite3.OperationalError:
        pass  # –ö–æ–ª–æ–Ω–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
   
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É company_id –≤ order_history, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
    try:
        cursor.execute("ALTER TABLE order_history ADD COLUMN company_id INTEGER")
    except sqlite3.OperationalError:
        pass  # –ö–æ–ª–æ–Ω–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
   
    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è AI-–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º—ã—Ö –∏–¥–µ–π (AI-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –±–∏–∑–Ω–µ—Å-–∏–¥–µ–π)
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS ai_ideas (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            idea_text TEXT NOT NULL,
            generated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users (id)
        )
    ''')
   
    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç—á–µ—Ç–æ–≤
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS auto_reports (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            report_type TEXT NOT NULL, -- 'daily', 'monthly'
            report_content TEXT NOT NULL,
            generated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users (id)
        )
    ''')
   
    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è (–Ω–∞–ª–æ–≥–∏, –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏)
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS financial_records (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            record_type TEXT NOT NULL, -- 'tax', 'debt', 'income', 'expense'
            amount REAL NOT NULL,
            description TEXT,
            record_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            is_paid BOOLEAN DEFAULT FALSE,
            due_date TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users (id)
        )
    ''')
   
    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –∂—É—Ä–Ω–∞–ª–∞ –¥–µ–π—Å—Ç–≤–∏–π (–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å)
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS activity_log (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            action TEXT NOT NULL,
            timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            ip_address TEXT,
            FOREIGN KEY (user_id) REFERENCES users (id)
        )
    ''')
   
    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS chat_messages (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            sender_id INTEGER NOT NULL,
            receiver_id INTEGER, -- NULL for group chat or specific user ID
            company_id INTEGER, -- For company-wide chats
            message TEXT NOT NULL,
            timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (sender_id) REFERENCES users (id),
            FOREIGN KEY (receiver_id) REFERENCES users (id),
            FOREIGN KEY (company_id) REFERENCES companies (id)
        )
    ''')
   
    # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –±—Ä–µ–Ω–¥–∞
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS branding_settings (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            logo_url TEXT,
            primary_color TEXT DEFAULT '#1E90FF',
            secondary_color TEXT DEFAULT '#FFD700',
            email_signature TEXT,
            FOREIGN KEY (user_id) REFERENCES users (id)
        )
    ''')
   
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    cursor.execute('SELECT * FROM users WHERE email = ?', ('admin@company.com',))
    if cursor.fetchone() is None:
        admin_password_hash = stauth.Hasher(['adminpass']).generate()[0]
        cursor.execute(
            "INSERT INTO users (email, password_hash, full_name, is_admin, premium_status) VALUES (?, ?, ?, ?, ?)",
            ('admin@company.com', admin_password_hash, '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', True, True)
        )
        conn.commit()
        st.success("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω: admin@company.com / adminpass")
   
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è alexkurumbayev@gmail.com, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    cursor.execute('SELECT * FROM users WHERE email = ?', ('alexkurumbayev@gmail.com',))
    if cursor.fetchone() is None:
        user_password_hash = stauth.Hasher(['qwerty123G']).generate()[0]
        cursor.execute(
            "INSERT INTO users (email, password_hash, full_name, is_admin, premium_status) VALUES (?, ?, ?, ?, ?)",
            ('alexkurumbayev@gmail.com', user_password_hash, 'Alex Kurumbayev', True, True)
        )
        conn.commit()
        st.success("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω: alexkurumbayev@gmail.com / qwerty123G")

    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def get_db_connection():
    conn = sqlite3.connect('business_manager.db')
    conn.row_factory = sqlite3.Row
    return conn

def add_user(email, password, full_name=None, phone=None, business_name=None, is_admin=False, premium_status=False):
    conn = get_db_connection()
    cursor = conn.cursor()
    password_hash = hashlib.sha256(password.encode()).hexdigest()
    try:
        cursor.execute(
            "INSERT INTO users (email, password_hash, full_name, phone, business_name, is_admin, premium_status) VALUES (?, ?, ?, ?, ?, ?, ?)",
            (email, password_hash, full_name, phone, business_name, is_admin, premium_status)
        )
        conn.commit()
        user_id = cursor.lastrowid
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ settings –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("INSERT INTO settings (user_id) VALUES (?) ", (user_id,))
        conn.commit()
        return True
    except sqlite3.IntegrityError:
        st.error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return False
    finally:
        conn.close()

def get_user_by_email(email):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM users WHERE email = ?", (email,))
    user = cursor.fetchone()
    conn.close()
    return user

def get_user_by_id(user_id):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM users WHERE id = ?", (user_id,))
    user = cursor.fetchone()
    conn.close()
    return user

def update_user_last_login(user_id):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("UPDATE users SET last_login = CURRENT_TIMESTAMP WHERE id = ?", (user_id,))
    conn.commit()
    conn.close()

def update_user_premium_status(user_id, status, start_date=None, end_date=None):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute(
        "UPDATE users SET premium_status = ?, premium_start_date = ?, premium_end_date = ? WHERE id = ?",
        (status, start_date, end_date, user_id)
    )
    conn.commit()
    conn.close()

def add_order(user_id, order_type, order_name, total_payment, delivery_type, company_id=None):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO orders (user_id, order_type, order_name, total_payment, delivery_type, company_id) VALUES (?, ?, ?, ?, ?, ?)",
        (user_id, order_type, order_name, total_payment, delivery_type, company_id)
    )
    conn.commit()
    order_id = cursor.lastrowid
    conn.close()
    return order_id

def add_order_item(order_id, product_name, quantity, cost_price, sale_price, weight, delivery_cost, total_cost, item_delivery_type="truck"):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO order_items (order_id, product_name, quantity, cost_price, sale_price, weight, delivery_cost, total_cost, item_delivery_type) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)",
        (order_id, product_name, quantity, cost_price, sale_price, weight, delivery_cost, total_cost, item_delivery_type)
    )
    conn.commit()
    conn.close()

def get_orders(user_id, company_id=None):
    conn = get_db_connection()
    cursor = conn.cursor()
    if company_id:
        cursor.execute("SELECT * FROM orders WHERE user_id = ? AND company_id = ? ORDER BY created_at DESC", (user_id, company_id))
    else:
        cursor.execute("SELECT * FROM orders WHERE user_id = ? ORDER BY created_at DESC", (user_id,))
    orders = cursor.fetchall()
    conn.close()
    return orders

def get_order_items(order_id):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM order_items WHERE order_id = ?", (order_id,))
    items = cursor.fetchall()
    conn.close()
    return items

def update_order_status(order_id, status, expected_delivery_date=None, actual_delivery_date=None):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute(
        "UPDATE orders SET status = ?, expected_delivery_date = ?, actual_delivery_date = ? WHERE id = ?",
        (status, expected_delivery_date, actual_delivery_date, order_id)
    )
    conn.commit()
    conn.close()

def add_inventory_item(user_id, product_name, quantity, link, company_id=None, warehouse_id=None):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO inventory (user_id, product_name, quantity, link, company_id, warehouse_id) VALUES (?, ?, ?, ?, ?, ?)",
        (user_id, product_name, quantity, link, company_id, warehouse_id)
    )
    conn.commit()
    conn.close()

def get_inventory_items(user_id, company_id=None):
    conn = get_db_connection()
    cursor = conn.cursor()
    if company_id:
        cursor.execute("SELECT * FROM inventory WHERE user_id = ? AND company_id = ? ORDER BY created_at DESC", (user_id, company_id))
    else:
        cursor.execute("SELECT * FROM inventory WHERE user_id = ? ORDER BY created_at DESC", (user_id,))
    items = cursor.fetchall()
    conn.close()
    return items

def update_inventory_quantity(item_id, new_quantity):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("UPDATE inventory SET quantity = ? WHERE id = ?", (new_quantity, item_id))
    conn.commit()
    conn.close()

def delete_inventory_item(item_id):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("DELETE FROM inventory WHERE id = ?", (item_id,))
    conn.commit()
    conn.close()

def add_order_to_history(user_id, order_id, product_name, quantity, cost_price, sale_price, weight, delivery_type, delivery_cost, total_cost, status="completed", company_id=None):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO order_history (user_id, order_id, product_name, quantity, cost_price, sale_price, weight, delivery_type, delivery_cost, total_cost, status, company_id) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
        (user_id, order_id, product_name, quantity, cost_price, sale_price, weight, delivery_type, delivery_cost, total_cost, status, company_id)
    )
    conn.commit()
    conn.close()

def get_order_history(user_id, company_id=None):
    conn = get_db_connection()
    cursor = conn.cursor()
    if company_id:
        cursor.execute("SELECT * FROM order_history WHERE user_id = ? AND company_id = ? ORDER BY order_date DESC", (user_id, company_id))
    else:
        cursor.execute("SELECT * FROM order_history WHERE user_id = ? ORDER BY order_date DESC", (user_id,))
    history = cursor.fetchall()
    conn.close()
    return history

def get_user_settings(user_id):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM settings WHERE user_id = ?", (user_id,))
    settings = cursor.fetchone()
    conn.close()
    return settings

def update_user_settings(user_id, financial_cushion_percent, email_notifications, smtp_server, smtp_port, email_username, email_password, notify_new_orders, notify_low_stock, notify_daily_report, airplane_price_per_kg, truck_price_per_kg):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute(
        "UPDATE settings SET financial_cushion_percent = ?, email_notifications = ?, smtp_server = ?, smtp_port = ?, email_username = ?, email_password = ?, notify_new_orders = ?, notify_low_stock = ?, notify_daily_report = ?, airplane_price_per_kg = ?, truck_price_per_kg = ? WHERE user_id = ?",
        (financial_cushion_percent, email_notifications, smtp_server, smtp_port, email_username, email_password, notify_new_orders, notify_low_stock, notify_daily_report, airplane_price_per_kg, truck_price_per_kg, user_id)
    )
    conn.commit()
    conn.close()

def send_email(to_email, subject, body, smtp_server, smtp_port, email_username, email_password):
    try:
        msg = MIMEMultipart()
        msg['From'] = email_username
        msg['To'] = to_email
        msg['Subject'] = subject
        msg.attach(MIMEText(body, 'plain'))

        context = ssl.create_default_context()
        with smtplib.SMTP_SSL(smtp_server, smtp_port, context=context) as server:
            server.login(email_username, email_password)
            server.sendmail(email_username, to_email, msg.as_string())
        return True
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email: {e}")
        return False

def send_new_order_notification(user_id, order_name, total_payment):
    settings = get_user_settings(user_id)
    if settings and settings['email_notifications'] and settings['notify_new_orders']:
        user = get_user_by_id(user_id)
        if user:
            subject = f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑: {order_name}"
            body = f"–£ –≤–∞—Å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ '{order_name}' –Ω–∞ —Å—É–º–º—É {total_payment} —Ä—É–±.\n\n–° —É–≤–∞–∂–µ–Ω–∏–µ–º,\n–í–∞—à –ë–∏–∑–Ω–µ—Å –ú–µ–Ω–µ–¥–∂–µ—Ä"
            send_email(user['email'], subject, body, settings['smtp_server'], settings['smtp_port'], settings['email_username'], settings['email_password'])

def send_low_stock_notification(user_id, product_name, quantity):
    settings = get_user_settings(user_id)
    if settings and settings['email_notifications'] and settings['notify_low_stock']:
        user = get_user_by_id(user_id)
        if user:
            subject = f"–ù–∏–∑–∫–∏–π –∑–∞–ø–∞—Å —Ç–æ–≤–∞—Ä–∞: {product_name}"
            body = f"–¢–æ–≤–∞—Ä '{product_name}' –Ω–∞ —Å–∫–ª–∞–¥–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è. –û—Å—Ç–∞—Ç–æ–∫: {quantity}.\n\n–° —É–≤–∞–∂–µ–Ω–∏–µ–º,\n–í–∞—à –ë–∏–∑–Ω–µ—Å –ú–µ–Ω–µ–¥–∂–µ—Ä"
            send_email(user['email'], subject, body, settings['smtp_server'], settings['smtp_port'], settings['email_username'], settings['email_password'])

def send_daily_report(user_id):
    settings = get_user_settings(user_id)
    if settings and settings['email_notifications'] and settings['notify_daily_report']:
        user = get_user_by_id(user_id)
        if user:
            subject = "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –ë–∏–∑–Ω–µ—Å –ú–µ–Ω–µ–¥–∂–µ—Ä–∞"
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
            body = "–≠—Ç–æ –≤–∞—à –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç. –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏: ...\n\n–° —É–≤–∞–∂–µ–Ω–∏–µ–º,\n–í–∞—à –ë–∏–∑–Ω–µ—Å –ú–µ–Ω–µ–¥–∂–µ—Ä"
            send_email(user['email'], subject, body, settings['smtp_server'], settings['smtp_port'], settings['email_username'], settings['email_password'])

def add_notification(user_id, message):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("INSERT INTO notifications (user_id, message) VALUES (?, ?)", (user_id, message))
    conn.commit()
    conn.close()

def get_notifications(user_id):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM notifications WHERE user_id = ? ORDER BY created_at DESC", (user_id,))
    notifications = cursor.fetchall()
    conn.close()
    return notifications

def mark_notification_as_read(notification_id):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("UPDATE notifications SET is_read = TRUE WHERE id = ?", (notification_id,))
    conn.commit()
    conn.close()

def get_unread_notifications_count(user_id):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT COUNT(*) FROM notifications WHERE user_id = ? AND is_read = FALSE", (user_id,))
    count = cursor.fetchone()[0]
    conn.close()
    return count

def add_company(owner_id, name):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("INSERT INTO companies (owner_id, name) VALUES (?, ?)", (owner_id, name))
    conn.commit()
    company_id = cursor.lastrowid
    # –î–æ–±–∞–≤–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –≤ user_companies —Å —Ä–æ–ª—å—é 'owner'
    cursor.execute("INSERT INTO user_companies (user_id, company_id, role) VALUES (?, ?, ?)", (owner_id, company_id, 'owner'))
    conn.commit()
    conn.close()
    return company_id

def get_companies_for_user(user_id):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT c.id, c.name, uc.role FROM companies c JOIN user_companies uc ON c.id = uc.company_id WHERE uc.user_id = ?", (user_id,))
    companies = cursor.fetchall()
    conn.close()
    return companies

def get_company_by_id(company_id):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM companies WHERE id = ?", (company_id,))
    company = cursor.fetchone()
    conn.close()
    return company

def add_user_to_company(user_id, company_id, role):
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        cursor.execute("INSERT INTO user_companies (user_id, company_id, role) VALUES (?, ?, ?)", (user_id, company_id, role))
        conn.commit()
        return True
    except sqlite3.IntegrityError:
        st.warning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —ç—Ç—É –∫–æ–º–ø–∞–Ω–∏—é.")
        return False
    finally:
        conn.close()

def get_users_in_company(company_id):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT u.id, u.email, u.full_name, uc.role FROM users u JOIN user_companies uc ON u.id = uc.user_id WHERE uc.company_id = ?", (company_id,))
    users = cursor.fetchall()
    conn.close()
    return users

def update_user_company_role(user_id, company_id, new_role):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("UPDATE user_companies SET role = ? WHERE user_id = ? AND company_id = ?", (new_role, user_id, company_id))
    conn.commit()
    conn.close()

def remove_user_from_company(user_id, company_id):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("DELETE FROM user_companies WHERE user_id = ? AND company_id = ?", (user_id, company_id))
    conn.commit()
    conn.close()

def add_warehouse(company_id, name, location):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("INSERT INTO warehouses (company_id, name, location) VALUES (?, ?, ?)", (company_id, name, location))
    conn.commit()
    conn.close()

def get_warehouses(company_id):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM warehouses WHERE company_id = ?", (company_id,))
    warehouses = cursor.fetchall()
    conn.close()
    return warehouses

def add_ai_idea(user_id, idea_text):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("INSERT INTO ai_ideas (user_id, idea_text) VALUES (?, ?)", (user_id, idea_text))
    conn.commit()
    conn.close()

def get_ai_ideas(user_id):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM ai_ideas WHERE user_id = ? ORDER BY generated_at DESC", (user_id,))
    ideas = cursor.fetchall()
    conn.close()
    return ideas

def add_auto_report(user_id, report_type, report_content):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("INSERT INTO auto_reports (user_id, report_type, report_content) VALUES (?, ?, ?)", (user_id, report_type, report_content))
    conn.commit()
    conn.close()

def get_auto_reports(user_id, report_type=None):
    conn = get_db_connection()
    cursor = conn.cursor()
    if report_type:
        cursor.execute("SELECT * FROM auto_reports WHERE user_id = ? AND report_type = ? ORDER BY generated_at DESC", (user_id, report_type))
    else:
        cursor.execute("SELECT * FROM auto_reports WHERE user_id = ? ORDER BY generated_at DESC", (user_id,))
    reports = cursor.fetchall()
    conn.close()
    return reports

def add_financial_record(user_id, record_type, amount, description=None, is_paid=False, due_date=None):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO financial_records (user_id, record_type, amount, description, is_paid, due_date) VALUES (?, ?, ?, ?, ?, ?)",
        (user_id, record_type, amount, description, is_paid, due_date)
    )
    conn.commit()
    conn.close()

def get_financial_records(user_id, record_type=None):
    conn = get_db_connection()
    cursor = conn.cursor()
    if record_type:
        cursor.execute("SELECT * FROM financial_records WHERE user_id = ? AND record_type = ? ORDER BY record_date DESC", (user_id, record_type))
    else:
        cursor.execute("SELECT * FROM financial_records WHERE user_id = ? ORDER BY record_date DESC", (user_id,))
    records = cursor.fetchall()
    conn.close()
    return records

def update_financial_record_status(record_id, is_paid):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("UPDATE financial_records SET is_paid = ? WHERE id = ?", (is_paid, record_id))
    conn.commit()
    conn.close()

def add_activity_log(user_id, action, ip_address=None):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("INSERT INTO activity_log (user_id, action, ip_address) VALUES (?, ?, ?)", (user_id, action, ip_address))
    conn.commit()
    conn.close()

def get_activity_log(user_id):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM activity_log WHERE user_id = ? ORDER BY timestamp DESC", (user_id,))
    log = cursor.fetchall()
    conn.close()
    return log

def add_chat_message(sender_id, message, receiver_id=None, company_id=None):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("INSERT INTO chat_messages (sender_id, message, receiver_id, company_id) VALUES (?, ?, ?, ?)", (sender_id, message, receiver_id, company_id))
    conn.commit()
    conn.close()

def get_chat_messages(user_id, other_user_id=None, company_id=None):
    conn = get_db_connection()
    cursor = conn.cursor()
    if company_id:
        # Company-wide chat
        cursor.execute("SELECT * FROM chat_messages WHERE company_id = ? ORDER BY timestamp ASC", (company_id,))
    elif other_user_id:
        # Private chat between two users
        cursor.execute("SELECT * FROM chat_messages WHERE (sender_id = ? AND receiver_id = ?) OR (sender_id = ? AND receiver_id = ?) ORDER BY timestamp ASC",
                       (user_id, other_user_id, other_user_id, user_id))
    else:
        # All messages for a user (could be expanded to show all private chats)
        cursor.execute("SELECT * FROM chat_messages WHERE sender_id = ? OR receiver_id = ? ORDER BY timestamp ASC", (user_id, user_id))
    messages = cursor.fetchall()
    conn.close()
    return messages

def update_branding_settings(user_id, logo_url=None, primary_color=None, secondary_color=None, email_signature=None):
    conn = get_db_connection()
    cursor = conn.cursor()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø–∏—Å—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("SELECT * FROM branding_settings WHERE user_id = ?", (user_id,))
    existing_settings = cursor.fetchone()

    if existing_settings:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
        update_query = "UPDATE branding_settings SET "
        update_params = []
        if logo_url is not None: update_query += "logo_url = ?, "; update_params.append(logo_url)
        if primary_color is not None: update_query += "primary_color = ?, "; update_params.append(primary_color)
        if secondary_color is not None: update_query += "secondary_color = ?, "; update_params.append(secondary_color)
        if email_signature is not None: update_query += "email_signature = ?, "; update_params.append(email_signature)
       
        if update_params:
            update_query = update_query.rstrip(', ') + " WHERE user_id = ?"
            update_params.append(user_id)
            cursor.execute(update_query, tuple(update_params))
    else:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        cursor.execute(
            "INSERT INTO branding_settings (user_id, logo_url, primary_color, secondary_color, email_signature) VALUES (?, ?, ?, ?, ?)",
            (user_id, logo_url, primary_color, secondary_color, email_signature)
        )
    conn.commit()
    conn.close()

def get_branding_settings(user_id):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM branding_settings WHERE user_id = ?", (user_id,))
    settings = cursor.fetchone()
    conn.close()
    return settings

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü Streamlit ---
def show_dashboard_page():
    st.title("üìä –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    st.write("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ë–∏–∑–Ω–µ—Å –ú–µ–Ω–µ–¥–∂–µ—Ä!")
   
    user_id = st.session_state.user_id
    current_company_id = st.session_state.get('active_company_id')

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∫–æ–º–ø–∞–Ω–∏–∏
    if current_company_id:
        company = get_company_by_id(current_company_id)
        if company:
            st.subheader(f"–¢–µ–∫—É—â–∞—è –∫–æ–º–ø–∞–Ω–∏—è: {company['name']}")

    # –ö—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    st.subheader("–ö—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    col1, col2, col3 = st.columns(3)
    with col1:
        orders = get_orders(user_id, current_company_id)
        st.metric(label="–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤", value=len(orders))
    with col2:
        inventory_items = get_inventory_items(user_id, current_company_id)
        st.metric(label="–¢–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ", value=len(inventory_items))
    with col3:
        # –ü—Ä–∏–º–µ—Ä: –æ–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–æ–≤
        total_sales = sum([order['total_payment'] for order in orders])
        st.metric(label="–û–±—â–∞—è —Å—É–º–º–∞ –ø—Ä–æ–¥–∞–∂", value=f"{total_sales:.2f} —Ä—É–±.")

    # –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–¥–∞–∂ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
    st.subheader("–ü—Ä–æ–¥–∞–∂–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π")
    sales_data = []
    today = datetime.now()
    for i in range(30):
        date = today - timedelta(days=i)
        daily_sales = sum([order['total_payment'] for order in orders if datetime.strptime(order['created_at'].split('.')[0], '%Y-%m-%d %H:%M:%S') .date() == date.date()])
        sales_data.append({"–î–∞—Ç–∞": date.strftime("%Y-%m-%d"), "–ü—Ä–æ–¥–∞–∂–∏": daily_sales})
    df_sales = pd.DataFrame(sales_data).sort_values(by="–î–∞—Ç–∞")
    st.line_chart(df_sales.set_index("–î–∞—Ç–∞"))

    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã
    st.subheader("–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã")
    if orders:
        df_orders = pd.DataFrame(orders)
        st.dataframe(df_orders[['order_name', 'total_payment', 'created_at', 'status']])
    else:
        st.info("–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")

    # –¢–æ–≤–∞—Ä—ã —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º (–ø—Ä–∏–º–µ—Ä)
    st.subheader("–¢–æ–≤–∞—Ä—ã —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º")
    low_stock_items = [item for item in inventory_items if item['quantity'] < 10] # –ü—Ä–∏–º–µ—Ä –ø–æ—Ä–æ–≥–∞
    if low_stock_items:
        df_low_stock = pd.DataFrame(low_stock_items)
        st.dataframe(df_low_stock[['product_name', 'quantity']])
    else:
        st.info("–í—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ.")

def show_orders_page():
    st.title("üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏")
    user_id = st.session_state.user_id
    current_company_id = st.session_state.get('active_company_id')

    st.subheader("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑")
    with st.form("new_order_form"):
        order_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞")
        order_type = st.selectbox("–¢–∏–ø –∑–∞–∫–∞–∑–∞", ["–ü—Ä–æ–¥–∞–∂–∞", "–ó–∞–∫—É–ø–∫–∞", "–í–æ–∑–≤—Ä–∞—Ç"])
        delivery_type = st.selectbox("–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏", ["truck", "airplane"])
        num_items = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π –≤ –∑–∞–∫–∞–∑–µ", min_value=1, value=1)

        items_data = []
        for i in range(num_items):
            st.markdown(f"#### –ü–æ–∑–∏—Ü–∏—è {i+1}")
            product_name = st.text_input(f"–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ {i+1}", key=f"product_name_{i}")
            quantity = st.number_input(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ {i+1}", min_value=1, key=f"quantity_{i}")
            cost_price = st.number_input(f"–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –µ–¥. {i+1}", min_value=0.0, key=f"cost_price_{i}")
            sale_price = st.number_input(f"–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ –∑–∞ –µ–¥. {i+1}", min_value=0.0, key=f"sale_price_{i}")
            weight = st.number_input(f"–í–µ—Å –∑–∞ –µ–¥. (–∫–≥) {i+1}", min_value=0.0, key=f"weight_{i}")
            item_delivery_type = st.selectbox(f"–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ {i+1}", ["truck", "airplane"], key=f"item_delivery_type_{i}")
            items_data.append({
                "product_name": product_name,
                "quantity": quantity,
                "cost_price": cost_price,
                "sale_price": sale_price,
                "weight": weight,
                "item_delivery_type": item_delivery_type
            })
       
        submitted = st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑")
        if submitted:
            total_payment = 0
            total_delivery_cost = 0
            settings = get_user_settings(user_id)
            airplane_price_per_kg = settings['airplane_price_per_kg'] if settings else 5.0
            truck_price_per_kg = settings['truck_price_per_kg'] if settings else 2.0

            for item in items_data:
                item_total_cost = item['quantity'] * item['cost_price']
                item_total_sale = item['quantity'] * item['sale_price']
                item_total_weight = item['quantity'] * item['weight']
               
                if item['item_delivery_type'] == "airplane":
                    item_delivery_cost = item_total_weight * airplane_price_per_kg
                else:
                    item_delivery_cost = item_total_weight * truck_price_per_kg
               
                total_payment += item_total_sale # –î–ª—è –ø—Ä–æ–¥–∞–∂
                total_delivery_cost += item_delivery_cost

                item['delivery_cost'] = item_delivery_cost
                item['total_cost'] = item_total_cost + item_delivery_cost

            order_id = add_order(user_id, order_type, order_name, total_payment, delivery_type, current_company_id)
            if order_id:
                for item in items_data:
                    add_order_item(order_id, item['product_name'], item['quantity'], item['cost_price'], item['sale_price'], item['weight'], item['delivery_cost'], item['total_cost'], item['item_delivery_type'])
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–æ–≤ (–¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–¥ –∑–∞–∫–∞–∑)
                    add_order_to_history(user_id, order_id, item['product_name'], item['quantity'], item['cost_price'], item['sale_price'], item['weight'], item['item_delivery_type'], item['delivery_cost'], item['total_cost'], company_id=current_company_id)
                st.success(f"–ó–∞–∫–∞–∑ '{order_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
                send_new_order_notification(user_id, order_name, total_payment)
            else:
                st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.")

    st.subheader("–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤")
    orders = get_orders(user_id, current_company_id)
    if orders:
        df_orders = pd.DataFrame(orders)
        st.dataframe(df_orders)

        selected_order_id = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π", [order['id'] for order in orders])
        if selected_order_id:
            st.subheader(f"–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ #{selected_order_id}")
            order_items = get_order_items(selected_order_id)
            if order_items:
                df_order_items = pd.DataFrame(order_items)
                st.dataframe(df_order_items)

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
            current_order = [o for o in orders if o['id'] == selected_order_id][0]
            new_status = st.selectbox("–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞", ["pending", "processing", "shipped", "delivered", "cancelled"], index=["pending", "processing", "shipped", "delivered", "cancelled"].index(current_order['status']))
            expected_date = st.date_input("–û–∂–∏–¥–∞–µ–º–∞—è –¥–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏", value=datetime.strptime(current_order['expected_delivery_date'].split('.')[0], '%Y-%m-%d %H:%M:%S').date() if current_order['expected_delivery_date'] else None)
            actual_date = st.date_input("–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –¥–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏", value=datetime.strptime(current_order['actual_delivery_date'].split('.')[0], '%Y-%m-%d %H:%M:%S').date() if current_order['actual_delivery_date'] else None)
           
            if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞"):
                update_order_status(selected_order_id, new_status, expected_date, actual_date)
                st.success("–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω.")
                st.rerun()

    else:
        st.info("–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")

def show_order_management_page():
    st.title("üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ)")
    st.write("–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏, –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ, –ª–æ–≥–∏—Å—Ç–∏–∫–∞.")
    user_id = st.session_state.user_id
    current_company_id = st.session_state.get('active_company_id')

    st.subheader("–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤ (—Ç–æ–≤–∞—Ä—ã –ø–æ–¥ –∑–∞–∫–∞–∑)")
    history = get_order_history(user_id, current_company_id)
    if history:
        df_history = pd.DataFrame(history)
        st.dataframe(df_history)
    else:
        st.info("–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤ –ø—É—Å—Ç–∞.")

    st.subheader("–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–µ–π –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
    # –ü—Ä–∏–º–µ—Ä: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
    unpaid_orders = [order for order in get_orders(user_id, current_company_id) if order['status'] != 'delivered' and order['total_payment'] > 0] # –£–ø—Ä–æ—â–µ–Ω–Ω–æ
    if unpaid_orders:
        st.warning("–ï—Å—Ç—å –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∏–ª–∏ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã!")
        for order in unpaid_orders:
            st.write(f"–ó–∞–∫–∞–∑ #{order['id']}: {order['order_name']} - {order['total_payment']} —Ä—É–±. (–°—Ç–∞—Ç—É—Å: {order['status']})")
            if st.button(f"–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ –∑–∞–∫–∞–∑—É #{order['id']}", key=f"remind_order_{order['id']}"):
                # –ó–¥–µ—Å—å –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (email/sms)
                st.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ –∑–∞–∫–∞–∑—É #{order['id']} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    else:
        st.info("–í—Å–µ –∑–∞–∫–∞–∑—ã –æ–ø–ª–∞—á–µ–Ω—ã –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã.")

    st.subheader("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å—á–µ—Ç–∞ –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã")
    st.write("–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—á–µ—Ç–æ–≤, –∞–∫—Ç–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.")
    # –ü—Ä–∏–º–µ—Ä: –∫–Ω–æ–ø–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—á–µ—Ç–∞
    if st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—á–µ—Ç –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞"):
        st.info("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—á–µ—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

def show_analytics_page():
    st.title("üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞")
    user_id = st.session_state.user_id
    current_company_id = st.session_state.get('active_company_id')

    st.subheader("–û–±–∑–æ—Ä –ø—Ä–æ–¥–∞–∂")
    orders = get_orders(user_id, current_company_id)
    if orders:
        df_orders = pd.DataFrame(orders)
        df_orders['created_at'] = pd.to_datetime(df_orders['created_at'])
        df_orders['month'] = df_orders['created_at'].dt.to_period('M')

        monthly_sales = df_orders.groupby('month')['total_payment'].sum().reset_index()
        monthly_sales['month'] = monthly_sales['month'].astype(str)
        fig = px.bar(monthly_sales, x='month', y='total_payment', title='–ü—Ä–æ–¥–∞–∂–∏ –ø–æ –º–µ—Å—è—Ü–∞–º')
        st.plotly_chart(fig)

        st.subheader("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ (LTV, —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è)")
        st.write("–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º, —Ä–∞—Å—á–µ—Ç LTV, —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.")
        st.info("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

    else:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏.")

def show_inventory_page():
    st.title("üè™ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–º")
    user_id = st.session_state.user_id
    current_company_id = st.session_state.get('active_company_id')

    st.subheader("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä –Ω–∞ —Å–∫–ª–∞–¥")
    with st.form("new_inventory_item_form"):
        product_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
        quantity = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", min_value=1)
        link = st.text_input("–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)")
       
        # –í—ã–±–æ—Ä —Å–∫–ª–∞–¥–∞ (–¥–ª—è –º—É–ª—å—Ç–∏—Å–∫–ª–∞–¥–∞)
        warehouses = get_warehouses(current_company_id)
        warehouse_options = {w['name']: w['id'] for w in warehouses}
        selected_warehouse_name = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥", list(warehouse_options.keys()) if warehouse_options else ["–ù–µ—Ç —Å–∫–ª–∞–¥–æ–≤"], key="warehouse_select")
        selected_warehouse_id = warehouse_options.get(selected_warehouse_name) if selected_warehouse_name != "–ù–µ—Ç —Å–∫–ª–∞–¥–æ–≤" else None

        submitted = st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
        if submitted:
            if product_name and quantity:
                add_inventory_item(user_id, product_name, quantity, link, current_company_id, selected_warehouse_id)
                st.success(f"–¢–æ–≤–∞—Ä '{product_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ —Å–∫–ª–∞–¥!")
                st.rerun()
            else:
                st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è.")

    st.subheader("–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ")
    inventory_items = get_inventory_items(user_id, current_company_id)
    if inventory_items:
        df_inventory = pd.DataFrame(inventory_items)
        st.dataframe(df_inventory)

        selected_item_id = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è", [item['id'] for item in inventory_items])
        if selected_item_id:
            current_item = [item for item in inventory_items if item['id'] == selected_item_id][0]
            new_quantity = st.number_input(f"–ù–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è {current_item['product_name']}", min_value=0, value=current_item['quantity'])
            if st.button("–û–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"):
                update_inventory_quantity(selected_item_id, new_quantity)
                st.success("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
                if new_quantity < 10: # –ü—Ä–∏–º–µ—Ä –ø–æ—Ä–æ–≥–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    send_low_stock_notification(user_id, current_item['product_name'], new_quantity)
                st.rerun()
            if st.button("–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä"):
                delete_inventory_item(selected_item_id)
                st.success("–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω —Å–æ —Å–∫–ª–∞–¥–∞.")
                st.rerun()
    else:
        st.info("–°–∫–ª–∞–¥ –ø—É—Å—Ç.")

    st.subheader("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞–º–∏ (–ú—É–ª—å—Ç–∏—Å–∫–ª–∞–¥)")
    if st.session_state.get('premium_status', False):
        with st.expander("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å–∫–ª–∞–¥"):
            new_warehouse_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–∫–ª–∞–¥–∞")
            new_warehouse_location = st.text_input("–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–∫–ª–∞–¥–∞")
            if st.button("–î–æ–±–∞–≤–∏—Ç—å —Å–∫–ª–∞–¥"):
                if new_warehouse_name and current_company_id:
                    add_warehouse(current_company_id, new_warehouse_name, new_warehouse_location)
                    st.success(f"–°–∫–ª–∞–¥ '{new_warehouse_name}' –¥–æ–±–∞–≤–ª–µ–Ω.")
                    st.rerun()
                else:
                    st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é.")

        st.subheader("–°–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤")
        warehouses = get_warehouses(current_company_id)
        if warehouses:
            df_warehouses = pd.DataFrame(warehouses)
            st.dataframe(df_warehouses)
        else:
            st.info("–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤.")
    else:
        st.warning("–§—É–Ω–∫—Ü–∏—è –º—É–ª—å—Ç–∏—Å–∫–ª–∞–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ü—Ä–µ–º–∏—É–º+ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

def show_notifications_page():
    st.title("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    user_id = st.session_state.user_id

    notifications = get_notifications(user_id)
    if notifications:
        for notification in notifications:
            status = "(–ü—Ä–æ—á–∏—Ç–∞–Ω–æ)" if notification['is_read'] else "(–ù–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ)"
            st.info(f"{notification['created_at']}: {notification['message']} {status}")
            if not notification['is_read']:
                if st.button(f"–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ #{notification['id']}", key=f"read_notif_{notification['id']}"):
                    mark_notification_as_read(notification['id'])
                    st.rerun()
    else:
        st.info("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")

def show_smart_page():
    st.title("üß† –ò–ò-—Ñ—É–Ω–∫—Ü–∏–∏")
    user_id = st.session_state.user_id

    if st.session_state.get('premium_status', False):
        st.subheader("AI-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –±–∏–∑–Ω–µ—Å-–∏–¥–µ–π")
        idea_prompt = st.text_area("–û–ø–∏—à–∏—Ç–µ, –¥–ª—è —á–µ–≥–æ –Ω—É–∂–Ω–∞ –∏–¥–µ—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–∏–¥–µ—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ —Å—Ñ–µ—Ä–µ e-commerce', '—Å—Ç—Ä–∞—Ç–µ–≥–∏—è –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞ –¥–ª—è –º–∞–ª–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞'):")
        if st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–¥–µ—é"):
            if idea_prompt:
                with st.spinner("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–¥–µ—é..."):
                    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ —Ä–µ–∞–ª—å–Ω–æ–π AI –º–æ–¥–µ–ª–∏
                    generated_idea = f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–¥–µ—è –¥–ª—è '{idea_prompt}':\n\n1. **–ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç:** –°–æ–∑–¥–∞–π—Ç–µ SaaS-–ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —É—á–µ—Ç–∞ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤ –≤ e-commerce, –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ CMS –∏ —Å–ª—É–∂–±–∞–º–∏ –¥–æ—Å—Ç–∞–≤–∫–∏. –ü—Ä–µ–¥–ª–æ–∂–∏—Ç–µ –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ –ø—Ä–∏—á–∏–Ω–∞–º –≤–æ–∑–≤—Ä–∞—Ç–æ–≤.\n2. **–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è:** –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ email-–∫–∞–º–ø–∞–Ω–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫—É–ø–æ–∫ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤, –ø—Ä–µ–¥–ª–∞–≥–∞—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏ —Å–∫–∏–¥–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏.\n3. **–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:** –í–Ω–µ–¥—Ä–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É –ø—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø—Ä–æ—Å–∞ –Ω–∞ —Ç–æ–≤–∞—Ä—ã, —á—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∫–ª–∞–¥—Å–∫–∏–µ –∑–∞–ø–∞—Å—ã –∏ —Å–Ω–∏–∑–∏—Ç—å –∏–∑–¥–µ—Ä–∂–∫–∏.\n\n*–≠—Ç–æ –ø—Ä–∏–º–µ—Ä, —Ä–µ–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–π AI –º–æ–¥–µ–ª–∏.*"
                    add_ai_idea(user_id, generated_idea)
                    st.success("–ò–¥–µ—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
                    st.rerun()
            else:
                st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–∏.")
       
        st.subheader("–í–∞—à–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–¥–µ–∏")
        ai_ideas = get_ai_ideas(user_id)
        if ai_ideas:
            for idea in ai_ideas:
                st.markdown(f"**–ò–¥–µ—è –æ—Ç {idea['generated_at']}**:\n{idea['idea_text']}")
                st.markdown("---–ù")
        else:
            st.info("–ü–æ–∫–∞ –Ω–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–¥–µ–π.")

        st.subheader("AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç 24/7")
        st.write("–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ–±—É—á–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.")
        st.info("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

    else:
        st.warning("–ò–ò-—Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –ü—Ä–µ–º–∏—É–º+ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

def show_settings_page():
    st.title("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    user_id = st.session_state.user_id
    settings = get_user_settings(user_id)

    if settings:
        st.subheader("–û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        new_financial_cushion_percent = st.slider("–ü—Ä–æ—Ü–µ–Ω—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –ø–æ–¥—É—à–∫–∏ (–¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤)", 0, 100, int(settings['financial_cushion_percent']))
       
        st.subheader("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        new_email_notifications = st.checkbox("–í–∫–ª—é—á–∏—Ç—å Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", value=settings['email_notifications'])
        new_smtp_server = st.text_input("SMTP –°–µ—Ä–≤–µ—Ä", value=settings['smtp_server'])
        new_smtp_port = st.number_input("SMTP –ü–æ—Ä—Ç", value=settings['smtp_port'])
        new_email_username = st.text_input("Email (–ª–æ–≥–∏–Ω)", value=settings['email_username'])
        new_email_password = st.text_input("–ü–∞—Ä–æ–ª—å Email", type="password", value=settings['email_password'])

        st.subheader("–¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        new_notify_new_orders = st.checkbox("–£–≤–µ–¥–æ–º–ª—è—Ç—å –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö", value=settings['notify_new_orders'])
        new_notify_low_stock = st.checkbox("–£–≤–µ–¥–æ–º–ª—è—Ç—å –æ –Ω–∏–∑–∫–æ–º –æ—Å—Ç–∞—Ç–∫–µ –Ω–∞ —Å–∫–ª–∞–¥–µ", value=settings['notify_low_stock'])
        new_notify_daily_report = st.checkbox("–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç", value=settings['notify_daily_report'])

        st.subheader("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ (–∑–∞ –∫–≥)")
        new_airplane_price_per_kg = st.number_input("–°–∞–º–æ–ª–µ—Ç", min_value=0.0, value=settings['airplane_price_per_kg'])
        new_truck_price_per_kg = st.number_input("–ì—Ä—É–∑–æ–≤–∏–∫", min_value=0.0, value=settings['truck_price_per_kg'])

        if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"):
            update_user_settings(user_id, new_financial_cushion_percent, new_email_notifications, new_smtp_server, new_smtp_port, new_email_username, new_email_password, new_notify_new_orders, new_notify_low_stock, new_notify_daily_report, new_airplane_price_per_kg, new_truck_price_per_kg)
            st.success("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
            st.rerun()
    else:
        st.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.")

    st.subheader("–ú—É–ª—å—Ç–∏–±–∏–∑–Ω–µ—Å")
    if st.session_state.get('premium_status', False):
        companies = get_companies_for_user(user_id)
        if companies:
            st.write("–í–∞—à–∏ –∫–æ–º–ø–∞–Ω–∏–∏:")
            for company in companies:
                col1, col2, col3 = st.columns([0.6, 0.2, 0.2])
                with col1:
                    st.write(f"- {company['name']} (–†–æ–ª—å: {company['role']})")
                with col2:
                    if st.button("–í—ã–±—Ä–∞—Ç—å", key=f"select_company_{company['id']}"):
                        st.session_state.active_company_id = company['id']
                        st.success(f"–í—ã–±—Ä–∞–Ω–∞ –∫–æ–º–ø–∞–Ω–∏—è: {company['name']}")
                        st.rerun()
                with col3:
                    if st.session_state.get('active_company_id') == company['id']:
                        st.success("–ê–∫—Ç–∏–≤–Ω–∞")
        else:
            st.info("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ–º–ø–∞–Ω–∏–π. –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é.")

        with st.expander("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–æ–º–ø–∞–Ω–∏—é"):
            new_company_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–∏")
            if st.button("–°–æ–∑–¥–∞—Ç—å –∫–æ–º–ø–∞–Ω–∏—é"):
                if new_company_name:
                    add_company(user_id, new_company_name)
                    st.success(f"–ö–æ–º–ø–∞–Ω–∏—è '{new_company_name}' —Å–æ–∑–¥–∞–Ω–∞!")
                    st.rerun()
                else:
                    st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏.")

        st.subheader("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π (–ì–∏–±–∫–∞—è —Ä–æ–ª–µ–≤–∞—è –º–æ–¥–µ–ª—å)")
        if st.session_state.get('active_company_id'):
            current_company_id = st.session_state.active_company_id
            st.write(f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏: {get_company_by_id(current_company_id)['name']}")

            st.markdown("##### –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–º–∞–Ω–¥—É")
            new_member_email = st.text_input("Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")
            new_member_role = st.selectbox("–†–æ–ª—å", ["viewer", "editor", "admin"])
            if st.button("–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É"):
                target_user = get_user_by_email(new_member_email)
                if target_user:
                    if add_user_to_company(target_user['id'], current_company_id, new_member_role):
                        st.success(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_member_email} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–º–∞–Ω–¥—É —Å —Ä–æ–ª—å—é {new_member_role}.")
                        st.rerun()
                else:
                    st.error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω.")
           
            st.markdown("##### –ß–ª–µ–Ω—ã –∫–æ–º–∞–Ω–¥—ã")
            team_members = get_users_in_company(current_company_id)
            if team_members:
                for member in team_members:
                    st.write(f"- {member['full_name']} ({member['email']}) - –†–æ–ª—å: {member['role']}")
                    if st.session_state.user_id != member['id'] and st.button(f"–ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å {member['email']}", key=f"change_role_{member['id']}"):
                        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏–ª–∏ —Ñ–æ—Ä–º—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏
                        st.info(f"–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏ –¥–ª—è {member['email']} –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
                    if st.session_state.user_id != member['id'] and st.button(f"–£–¥–∞–ª–∏—Ç—å –∏–∑ –∫–æ–º–∞–Ω–¥—ã {member['email']}", key=f"remove_member_{member['id']}"):
                        remove_user_from_company(member['id'], current_company_id)
                        st.success(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {member['email']} —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ–º–∞–Ω–¥—ã.")
                        st.rerun()
            else:
                st.info("–í —ç—Ç–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —á–ª–µ–Ω–æ–≤ –∫–æ–º–∞–Ω–¥—ã.")

        else:
            st.info("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–æ–π.")

        st.subheader("–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –±—Ä–µ–Ω–¥")
        branding_settings = get_branding_settings(user_id)
        with st.expander("–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –±—Ä–µ–Ω–¥"):
            new_logo_url = st.text_input("URL –ª–æ–≥–æ—Ç–∏–ø–∞", value=branding_settings['logo_url'] if branding_settings else "")
            new_primary_color = st.color_picker("–û—Å–Ω–æ–≤–Ω–æ–π —Ü–≤–µ—Ç", value=branding_settings['primary_color'] if branding_settings else "#1E90FF")
            new_secondary_color = st.color_picker("–í—Ç–æ—Ä–∏—á–Ω—ã–π —Ü–≤–µ—Ç", value=branding_settings['secondary_color'] if branding_settings else "#FFD700")
            new_email_signature = st.text_area("–ü–æ–¥–ø–∏—Å—å –¥–ª—è Email", value=branding_settings['email_signature'] if branding_settings else "")
           
            if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–µ–Ω–¥–∞"):
                update_branding_settings(user_id, new_logo_url, new_primary_color, new_secondary_color, new_email_signature)
                st.success("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–µ–Ω–¥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
                st.rerun()

    else:
        st.warning("–§—É–Ω–∫—Ü–∏–∏ –º—É–ª—å—Ç–∏–±–∏–∑–Ω–µ—Å–∞, —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–æ–π –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –±—Ä–µ–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –ü—Ä–µ–º–∏—É–º+ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

    st.subheader("–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å")
    if st.session_state.get('premium_status', False):
        with st.expander("–î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –∑–∞–ø–∏—Å—å"):
            record_type = st.selectbox("–¢–∏–ø –∑–∞–ø–∏—Å–∏", ["tax", "debt", "income", "expense"])
            amount = st.number_input("–°—É–º–º–∞", min_value=0.0, format="%.2f")
            description = st.text_area("–û–ø–∏—Å–∞–Ω–∏–µ")
            is_paid = st.checkbox("–û–ø–ª–∞—á–µ–Ω–æ?")
            due_date = st.date_input("–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)", value=None)
            if st.button("–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å"):
                add_financial_record(user_id, record_type, amount, description, is_paid, due_date)
                st.success("–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∑–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
                st.rerun()
       
        st.subheader("–í–∞—à–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏")
        financial_records = get_financial_records(user_id)
        if financial_records:
            df_financial = pd.DataFrame(financial_records)
            st.dataframe(df_financial)

            selected_record_id = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞", [r['id'] for r in financial_records])
            if selected_record_id:
                current_record = [r for r in financial_records if r['id'] == selected_record_id][0]
                new_is_paid = st.checkbox(f"–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–æ –¥–ª—è –∑–∞–ø–∏—Å–∏ #{selected_record_id}", value=current_record['is_paid'])
                if st.button("–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã"):
                    update_financial_record_status(selected_record_id, new_is_paid)
                    st.success("–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω.")
                    st.rerun()
        else:
            st.info("–ü–æ–∫–∞ –Ω–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π.")
    else:
        st.warning("–§—É–Ω–∫—Ü–∏–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –ü—Ä–µ–º–∏—É–º+ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

    st.subheader("–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å (2FA, —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ, –∂—É—Ä–Ω–∞–ª –¥–µ–π—Å—Ç–≤–∏–π)")
    if st.session_state.get('premium_status', False):
        st.write("–ó–¥–µ—Å—å –±—É–¥—É—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è, —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä –∂—É—Ä–Ω–∞–ª–∞ –¥–µ–π—Å—Ç–≤–∏–π.")
       
        st.markdown("##### –ñ—É—Ä–Ω–∞–ª –¥–µ–π—Å—Ç–≤–∏–π")
        activity_log = get_activity_log(user_id)
        if activity_log:
            df_log = pd.DataFrame(activity_log)
            st.dataframe(df_log)
        else:
            st.info("–ñ—É—Ä–Ω–∞–ª –¥–µ–π—Å—Ç–≤–∏–π –ø—É—Å—Ç.")

    else:
        st.warning("–§—É–Ω–∫—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –ü—Ä–µ–º–∏—É–º+ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

    st.subheader("–≠–∫—Å–ø–æ—Ä—Ç/–ò–º–ø–æ—Ä—Ç")
    if st.session_state.get('premium_status', False):
        st.write("–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —ç–∫—Å–ø–æ—Ä—Ç–∞/–∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö (Excel, PDF, 1–°, Google Sheets).")
        st.info("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —ç–∫—Å–ø–æ—Ä—Ç–∞/–∏–º–ø–æ—Ä—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
    else:
        st.warning("–§—É–Ω–∫—Ü–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞/–∏–º–ø–æ—Ä—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –ü—Ä–µ–º–∏—É–º+ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

    st.subheader("VIP-–ø–æ–¥–¥–µ—Ä–∂–∫–∞")
    if st.session_state.get('premium_status', False):
        st.write("–£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞ VIP-–ø–æ–¥–¥–µ—Ä–∂–∫–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –≤–∞—à–∏–º –ª–∏—á–Ω—ã–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø–æ–º–æ—â–∏.")
        st.info("–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ª–∏—á–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±—É–¥–µ—Ç –∑–¥–µ—Å—å.")
    else:
        st.warning("VIP-–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ü—Ä–µ–º–∏—É–º+ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

def show_admin_users_page():
    st.title("üë®‚Äçüíº –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (–ê–¥–º–∏–Ω)")
    st.write("–ó–¥–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –≤—Å–µ–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ —Å–∏—Å—Ç–µ–º—ã.")

    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM users")
    users = cursor.fetchall()
    conn.close()

    if users:
        df_users = pd.DataFrame(users)
        st.dataframe(df_users)

        st.subheader("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        with st.form("new_user_form"):
            email = st.text_input("Email")
            password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")
            full_name = st.text_input("–ü–æ–ª–Ω–æ–µ –∏–º—è")
            is_admin_new = st.checkbox("–°–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
            premium_status_new = st.checkbox("–ü—Ä–µ–º–∏—É–º+ —Å—Ç–∞—Ç—É—Å")
            submitted = st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            if submitted:
                if add_user(email, password, full_name, is_admin=is_admin_new, premium_status=premium_status_new):
                    st.success(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {email} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
                    st.rerun()

        st.subheader("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
        selected_user_email = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è", [u['email'] for u in users])
        if selected_user_email:
            selected_user = get_user_by_email(selected_user_email)
            if selected_user:
                st.write(f"**–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {selected_user['full_name']} ({selected_user['email']})**")
                new_premium_status = st.checkbox("–ü—Ä–µ–º–∏—É–º+ —Å—Ç–∞—Ç—É—Å", value=selected_user['premium_status'], key=f"premium_status_{selected_user['id']}")
                if st.button("–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å", key=f"update_premium_{selected_user['id']}"):
                    update_user_premium_status(selected_user['id'], new_premium_status)
                    st.success("–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω.")
                    st.rerun()

    else:
        st.info("–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

def show_admin_payments_page():
    st.title("üë®‚Äçüíº –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞–º–∏ (–ê–¥–º–∏–Ω)")
    st.write("–ó–¥–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–ª–∞—Ç–µ–∂–∞–º–∏.")
    st.info("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞–º–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

def show_admin_stats_page():
    st.title("üë®‚Äçüíº –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã (–ê–¥–º–∏–Ω)")
    st.write("–ó–¥–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã.")
    st.info("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

def show_admin_reports_page():
    st.title("üë®‚Äçüíº –û—Ç—á–µ—Ç—ã —Å–∏—Å—Ç–µ–º—ã (–ê–¥–º–∏–Ω)")
    st.write("–ó–¥–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç—ã –ø–æ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º–µ.")
    st.info("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –æ—Ç—á–µ—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

def show_admin_settings_page():
    st.title("üë®‚Äçüíº –ê–¥–º–∏–Ω –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    st.write("–ó–¥–µ—Å—å –±—É–¥—É—Ç –æ–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    st.info("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∞–¥–º–∏–Ω –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

# --- –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Streamlit ---
init_db()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session_state –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
if 'current_page' not in st.session_state:
    st.session_state.current_page = "dashboard"
if 'admin_page' not in st.session_state:
    st.session_state.admin_page = "users" # –î–µ—Ñ–æ–ª—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏

# –ü–æ–ª—É—á–∞–µ–º user_id –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ª–æ–≥–∏–Ω–∞
if 'username' in st.session_state:
    logged_in_user = get_user_by_email(st.session_state.username)
    if logged_in_user:
        st.session_state.user_id = logged_in_user['id']
        st.session_state.is_admin = logged_in_user['is_admin']
        st.session_state.premium_status = logged_in_user['premium_status']
        update_user_last_login(st.session_state.user_id)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–æ–º–ø–∞–Ω–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
        if 'active_company_id' not in st.session_state:
            companies = get_companies_for_user(st.session_state.user_id)
            if companies:
                # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é –∫–æ–º–ø–∞–Ω–∏—é, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∏–ª–∏ –∞–¥–º–∏–Ω–æ–º
                owner_company = next((c for c in companies if c['role'] in ['owner', 'admin']), None)
                if owner_company:
                    st.session_state.active_company_id = owner_company['id']
                else:
                    st.session_state.active_company_id = companies[0]['id'] # –ò–ª–∏ –ª—é–±—É—é –ø–µ—Ä–≤—É—é
            else:
                # –ï—Å–ª–∏ –∫–æ–º–ø–∞–Ω–∏–π –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                default_company_name = f"–ö–æ–º–ø–∞–Ω–∏—è {logged_in_user['full_name'] or logged_in_user['email']}"
                new_company_id = add_company(st.session_state.user_id, default_company_name)
                st.session_state.active_company_id = new_company_id
                st.success(f"–°–æ–∑–¥–∞–Ω–∞ –∫–æ–º–ø–∞–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {default_company_name}")

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        show_modern_navigation()
        show_admin_navigation()

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü
        if st.session_state.current_page == "dashboard":
            show_dashboard_page()
        elif st.session_state.current_page == "orders":
            show_orders_page()
        elif st.session_state.current_page == "order_management":
            show_order_management_page()
        elif st.session_state.current_page == "analytics":
            show_analytics_page()
        elif st.session_state.current_page == "inventory":
            show_inventory_page()
        elif st.session_state.current_page == "notifications":
            show_notifications_page()
        elif st.session_state.current_page == "smart":
            show_smart_page()
        elif st.session_state.current_page == "settings":
            show_settings_page()
        elif st.session_state.current_page == "admin":
            if st.session_state.admin_page == "users":
                show_admin_users_page()
            elif st.session_state.admin_page == "payments":
                show_admin_payments_page()
            elif st.session_state.admin_page == "stats":
                show_admin_stats_page()
            elif st.session_state.admin_page == "reports":
                show_admin_reports_page()
            elif st.session_state.admin_page == "admin_settings":
                show_admin_settings_page()
    else:
        st.error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
else:
    st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.")

# –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ (–µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω)
if 'scheduler_started' not in st.session_state:
    start_automation_for_user(st.session_state.user_id, daily=True, monthly=True) # –ü—Ä–∏–º–µ—Ä –∑–∞–ø—É—Å–∫–∞
    st.session_state.scheduler_started = True

# CSS –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è Streamlit —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
hide_streamlit_style = """
            <style>
            #MainMenu {visibility: hidden;}
            footer {visibility: hidden;}
            </style>
            """
st.markdown(hide_streamlit_style, unsafe_allow_html=True)


