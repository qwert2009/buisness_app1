        else:
            button_label = "üîî"
           
        if st.button(button_label, use_container_width=True, type=notification_button_type):
            st.session_state.current_page = "notifications"
            st.rerun()
   
    with col7:
        if st.button("üß† –ò–ò", use_container_width=True,
                    type="primary" if st.session_state.current_page == "smart" else "secondary"):
            st.session_state.current_page = "smart"
            st.rerun()
   
    with col8:
        if st.button("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", use_container_width=True,
                    type="primary" if st.session_state.current_page == "settings" else "secondary"):
            st.session_state.current_page = "settings"
            st.rerun()

def show_admin_navigation():
    """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if st.session_state.get('is_admin', False):
        st.markdown("---")
        st.markdown("### üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
       
        # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏
        col1, col2, col3, col4, col5 = st.columns(5)
       
        with col1:
            if st.button("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", use_container_width=True,
                        type="primary" if st.session_state.get('admin_page') == "users" else "secondary",
                        key="admin_users_btn"):
                st.session_state.admin_page = "users"
                st.session_state.current_page = "admin"
                st.rerun()
       
        with col2:
            if st.button("üí≥ –ü–ª–∞—Ç–µ–∂–∏", use_container_width=True,
                        type="primary" if st.session_state.get('admin_page') == "payments" else "secondary",
                        key="admin_payments_btn"):
                st.session_state.admin_page = "payments"
                st.session_state.current_page = "admin"
                st.rerun()
       
        with col3:
            if st.button("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", use_container_width=True,
                        type="primary" if st.session_state.get('admin_page') == "stats" else "secondary",
                        key="admin_stats_btn"):
                st.session_state.admin_page = "stats"
                st.session_state.current_page = "admin"
                st.rerun()
       
        with col4:
            if st.button("üìà –û—Ç—á–µ—Ç—ã", use_container_width=True,
                        type="primary" if st.session_state.get('admin_page') == "reports" else "secondary",
                        key="admin_reports_btn"):
                st.session_state.admin_page = "reports"
                st.session_state.current_page = "admin"
                st.rerun()
       
        with col5:
            if st.button("‚öôÔ∏è –ê–¥–º–∏–Ω –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", use_container_width=True,
                        type="primary" if st.session_state.get('admin_page') == "admin_settings" else "secondary",
                        key="admin_settings_btn"):
                st.session_state.admin_page = "admin_settings"
                st.session_state.current_page = "admin"
                st.rerun()
       
        st.markdown("---")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    # –î–æ–±–∞–≤–ª—è–µ–º warehouse_id –≤ inventory, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    try:
        cursor.execute("ALTER TABLE inventory ADD COLUMN warehouse_id INTEGER")
    except Exception:
        pass
    conn = sqlite3.connect('business_manager.db')
    cursor = conn.cursor()
   
    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            email TEXT UNIQUE NOT NULL,
            password_hash TEXT NOT NULL,
            phone TEXT,
            full_name TEXT,
            business_name TEXT,
            is_admin BOOLEAN DEFAULT FALSE,
            premium_status BOOLEAN DEFAULT FALSE,
            premium_start_date TIMESTAMP,
            premium_end_date TIMESTAMP,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            last_login TIMESTAMP
        )
    ''')
   
    # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–∫–∞–∑–æ–≤
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS orders (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            order_type TEXT NOT NULL,
            order_name TEXT NOT NULL,
            total_payment REAL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            delivery_type TEXT,
            notification_sent INTEGER DEFAULT 0,
            FOREIGN KEY (user_id) REFERENCES users (id)
        )
    ''')
   
    # –¢–∞–±–ª–∏—Ü–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∑–∞–∫–∞–∑–∞—Ö
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS order_items (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            order_id INTEGER,
            product_name TEXT NOT NULL,
            quantity INTEGER NOT NULL,
            cost_price REAL NOT NULL,
            sale_price REAL DEFAULT 0,
            weight REAL NOT NULL,
            delivery_cost REAL,
            total_cost REAL,
            FOREIGN KEY (order_id) REFERENCES orders (id)
        )
    ''')
   
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É sale_price –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    try:
        cursor.execute('ALTER TABLE order_items ADD COLUMN sale_price REAL DEFAULT 0')
    except sqlite3.OperationalError:
        pass  # –ö–æ–ª–æ–Ω–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
   
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É delivery_type –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    try:
        cursor.execute('ALTER TABLE order_items ADD COLUMN item_delivery_type TEXT DEFAULT "truck"')
    except sqlite3.OperationalError:
        pass  # –ö–æ–ª–æ–Ω–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
   
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–æ–≤
    try:
        cursor.execute('ALTER TABLE orders ADD COLUMN status TEXT DEFAULT "pending"')
    except sqlite3.OperationalError:
        pass  # –ö–æ–ª–æ–Ω–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
   
    try:
        cursor.execute('ALTER TABLE orders ADD COLUMN expected_delivery_date TIMESTAMP')
    except sqlite3.OperationalError:
        pass  # –ö–æ–ª–æ–Ω–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
   
    try:
        cursor.execute('ALTER TABLE orders ADD COLUMN actual_delivery_date TIMESTAMP')
    except sqlite3.OperationalError:
        pass  # –ö–æ–ª–æ–Ω–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
   
    try:
        cursor.execute('ALTER TABLE orders ADD COLUMN delay_notification_sent INTEGER DEFAULT 0')
    except sqlite3.OperationalError:
        pass  # –ö–æ–ª–æ–Ω–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
   
    # –¢–∞–±–ª–∏—Ü–∞ —Å–∫–ª–∞–¥–∞
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS inventory (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            product_name TEXT NOT NULL,
            quantity INTEGER NOT NULL,
            link TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users (id)
        )
    ''')
   
    # –¢–∞–±–ª–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤ (–¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–≤–æ–∑—è—Ç—Å—è –ø–æ–¥ –∑–∞–∫–∞–∑)
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS order_history (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            order_id INTEGER,
            product_name TEXT NOT NULL,
            quantity INTEGER NOT NULL,
            cost_price REAL NOT NULL,
            sale_price REAL NOT NULL,
            weight REAL NOT NULL,
            delivery_type TEXT DEFAULT "truck",
            delivery_cost REAL NOT NULL,
            total_cost REAL NOT NULL,
            order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            status TEXT DEFAULT "completed",
            FOREIGN KEY (user_id) REFERENCES users (id),
            FOREIGN KEY (order_id) REFERENCES orders (id)
        )
    ''')
   
    # –¢–∞–±–ª–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS settings (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            financial_cushion_percent REAL DEFAULT 20.0,
            email_notifications BOOLEAN DEFAULT 1,
            smtp_server TEXT,
            smtp_port INTEGER DEFAULT 587,
            email_username TEXT,
            email_password TEXT,
            notify_new_orders BOOLEAN DEFAULT 1,
            notify_low_stock BOOLEAN DEFAULT 1,
            notify_daily_report BOOLEAN DEFAULT 0,
            FOREIGN KEY (user_id) REFERENCES users (id)
        )
    ''')
   
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É settings, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    try:
        cursor.execute("ALTER TABLE settings ADD COLUMN notify_new_orders BOOLEAN DEFAULT 1")
    except sqlite3.OperationalError:
        pass  # –ü–æ–ª–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
   
    try:
        cursor.execute("ALTER TABLE settings ADD COLUMN notify_low_stock BOOLEAN DEFAULT 1")
    except sqlite3.OperationalError:
        pass  # –ü–æ–ª–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
       
    try:
        cursor.execute("ALTER TABLE settings ADD COLUMN notify_daily_report BOOLEAN DEFAULT 0")
    except sqlite3.OperationalError:
        pass  # –ü–æ–ª–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
   
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –¥–ª—è —Ü–µ–Ω –¥–æ—Å—Ç–∞–≤–∫–∏
    try:
        cursor.execute("ALTER TABLE settings ADD COLUMN airplane_price_per_kg REAL DEFAULT 5.0")
    except (sqlite3.OperationalError, sqlite3.ProgrammingError):
        pass  # –ü–æ–ª–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
   
    try:
        cursor.execute("ALTER TABLE settings ADD COLUMN truck_price_per_kg REAL DEFAULT 2.0")
    except (sqlite3.OperationalError, sqlite3.ProgrammingError):
        pass  # –ü–æ–ª–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç