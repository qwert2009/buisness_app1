#!/usr/bin/env python3
"""
Deployment script for Business Manager Premium+
–°–∫—Ä–∏–ø—Ç –¥–µ–ø–ª–æ—è –¥–ª—è –ë–∏–∑–Ω–µ—Å –ú–µ–Ω–µ–¥–∂–µ—Ä –ü—Ä–µ–º–∏—É–º+
"""

import os
import sys
import subprocess
import shutil
from datetime import datetime
from config import get_config

def check_requirements():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python
    if sys.version_info < (3, 11):
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.11 –∏–ª–∏ –≤—ã—à–µ")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è pip
    try:
        subprocess.run(['pip', '--version'], check=True, capture_output=True)
    except subprocess.CalledProcessError:
        print("‚ùå pip –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    print("‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
    return True

def install_dependencies():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    try:
        subprocess.run([
            sys.executable, '-m', 'pip', 'install', '-r', 'requirements.txt'
        ], check=True)
        print("‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")
        return False

def setup_directories():
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
    print("üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...")
    
    directories = [
        'logs',
        'backups',
        'uploads',
        'exports',
        'static/images',
        'static/css',
        'static/js'
    ]
    
    for directory in directories:
        os.makedirs(directory, exist_ok=True)
    
    print("‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã")

def setup_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üóÑÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        from enhanced_app import init_enhanced_db, create_admin_user
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        init_enhanced_db()
        
        # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        create_admin_user()
        
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def setup_environment():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    env_template = """
# –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
FLASK_ENV=production
SECRET_KEY=your-secret-key-change-this-in-production

# OpenAI API (–¥–ª—è –ò–ò —Ñ—É–Ω–∫—Ü–∏–π)
OPENAI_API_KEY=your-openai-api-key
OPENAI_API_BASE=https://api.openai.com/v1

# Email –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
SMTP_SERVER=smtp.gmail.com
SMTP_PORT=587
SMTP_USERNAME=your-email@gmail.com
SMTP_PASSWORD=your-app-password

# Telegram Bot (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
TELEGRAM_BOT_TOKEN=your-telegram-bot-token

# WhatsApp API (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
WHATSAPP_API_TOKEN=your-whatsapp-token
WHATSAPP_PHONE_ID=your-phone-id

# 1–° –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
ONEC_SERVER_URL=http://your-1c-server
ONEC_USERNAME=your-1c-username
ONEC_PASSWORD=your-1c-password

# CRM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
CRM_API_URL=https://your-crm-api
CRM_API_KEY=your-crm-api-key

# Google Sheets (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
GOOGLE_SHEETS_CREDENTIALS_FILE=path/to/credentials.json

# VAPID –∫–ª—é—á–∏ –¥–ª—è push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
VAPID_PUBLIC_KEY=your-vapid-public-key
VAPID_PRIVATE_KEY=your-vapid-private-key
"""
    
    if not os.path.exists('.env'):
        with open('.env', 'w', encoding='utf-8') as f:
            f.write(env_template.strip())
        print("‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª .env —Å —à–∞–±–ª–æ–Ω–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        print("‚ö†Ô∏è  –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª .env –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º!")
    else:
        print("‚úÖ –§–∞–π–ª .env —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

def create_systemd_service():
    """–°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è Linux"""
    if os.name != 'posix':
        return
    
    print("üîß –°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–µ—Ä–≤–∏—Å–∞...")
    
    current_dir = os.path.abspath('.')
    python_path = sys.executable
    
    service_content = f"""[Unit]
Description=Business Manager Premium+
After=network.target

[Service]
Type=simple
User=ubuntu
WorkingDirectory={current_dir}
Environment=PATH={os.path.dirname(python_path)}
ExecStart={python_path} -m streamlit run enhanced_app.py --server.port 8501 --server.address 0.0.0.0
Restart=always
RestartSec=3

[Install]
WantedBy=multi-user.target
"""
    
    service_file = 'business-manager.service'
    with open(service_file, 'w') as f:
        f.write(service_content)
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª —Å–µ—Ä–≤–∏—Å–∞: {service_file}")
    print("üìã –î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–∏—Å–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
    print(f"   sudo cp {service_file} /etc/systemd/system/")
    print("   sudo systemctl daemon-reload")
    print("   sudo systemctl enable business-manager")
    print("   sudo systemctl start business-manager")

def create_docker_files():
    """–°–æ–∑–¥–∞–Ω–∏–µ Docker —Ñ–∞–π–ª–æ–≤"""
    print("üê≥ –°–æ–∑–¥–∞–Ω–∏–µ Docker —Ñ–∞–π–ª–æ–≤...")
    
    dockerfile_content = """FROM python:3.11-slim

WORKDIR /app

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
RUN apt-get update && apt-get install -y \\
    gcc \\
    && rm -rf /var/lib/apt/lists/*

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
COPY requirements.txt .

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
RUN pip install --no-cache-dir -r requirements.txt

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
COPY . .

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
RUN mkdir -p logs backups uploads exports static/images static/css static/js

# –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ—Ä—Ç–∞
EXPOSE 8501

# –ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞
CMD ["streamlit", "run", "enhanced_app.py", "--server.port=8501", "--server.address=0.0.0.0"]
"""
    
    docker_compose_content = """version: '3.8'

services:
  business-manager:
    build: .
    ports:
      - "8501:8501"
    environment:
      - FLASK_ENV=production
    volumes:
      - ./business_manager.db:/app/business_manager.db
      - ./logs:/app/logs
      - ./backups:/app/backups
      - ./uploads:/app/uploads
    restart: unless-stopped
    
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - business-manager
    restart: unless-stopped
"""
    
    nginx_config = """events {
    worker_connections 1024;
}

http {
    upstream business_manager {
        server business-manager:8501;
    }
    
    server {
        listen 80;
        server_name your-domain.com;
        
        location / {
            proxy_pass http://business_manager;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–ª—è Streamlit
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }
    }
}
"""
    
    with open('Dockerfile', 'w') as f:
        f.write(dockerfile_content)
    
    with open('docker-compose.yml', 'w') as f:
        f.write(docker_compose_content)
    
    with open('nginx.conf', 'w') as f:
        f.write(nginx_config)
    
    print("‚úÖ Docker —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã")
    print("üìã –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Å Docker:")
    print("   docker-compose up -d")

def run_tests():
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤"""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...")
    
    try:
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
        import enhanced_app
        import ai_services
        import chat_notification_service
        import integration_service
        import ui_components
        import mobile_pwa
        
        print("‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        return True
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False

def create_backup():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
    print("üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...")
    
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_name = f"backup_{timestamp}"
    
    # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤ —Å –∏—Å—Ö–æ–¥–Ω—ã–º –∫–æ–¥–æ–º
    shutil.make_archive(
        f"backups/{backup_name}", 
        'zip', 
        '.', 
        ignore=shutil.ignore_patterns('__pycache__', '*.pyc', '.git', 'backups')
    )
    
    print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: backups/{backup_name}.zip")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–ø–ª–æ—è"""
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –¥–µ–ø–ª–æ–π Business Manager Premium+")
    print("=" * 50)
    
    steps = [
        ("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π", check_requirements),
        ("–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π", setup_directories),
        ("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π", install_dependencies),
        ("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è", setup_environment),
        ("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î", setup_database),
        ("–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞", create_systemd_service),
        ("–°–æ–∑–¥–∞–Ω–∏–µ Docker —Ñ–∞–π–ª–æ–≤", create_docker_files),
        ("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤", run_tests),
        ("–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏", create_backup)
    ]
    
    failed_steps = []
    
    for step_name, step_func in steps:
        print(f"\\n{step_name}...")
        try:
            if not step_func():
                failed_steps.append(step_name)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —à–∞–≥–µ '{step_name}': {e}")
            failed_steps.append(step_name)
    
    print("\\n" + "=" * 50)
    
    if failed_steps:
        print("‚ö†Ô∏è  –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏:")
        for step in failed_steps:
            print(f"   - {step}")
        print("\\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –¥–µ–ø–ª–æ–π.")
    else:
        print("üéâ –î–µ–ø–ª–æ–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print("\\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª .env —Å –≤–∞—à–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏")
        print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: streamlit run enhanced_app.py")
        print("3. –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:8501 –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
        print("4. –í–æ–π–¥–∏—Ç–µ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: alexkurumbayev@gmail.com / qwerty123G")
        print("\\nüîí –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")

if __name__ == "__main__":
    main()

